<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="" xml:lang="">
<head>
  <meta charset="utf-8" />
  <meta name="generator" content="pandoc" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
  <title>iife</title>
  <style>
    html {
      color: #1a1a1a;
      background-color: #fdfdfd;
    }
    body {
      margin: 0 auto;
      max-width: 36em;
      padding-left: 50px;
      padding-right: 50px;
      padding-top: 50px;
      padding-bottom: 50px;
      hyphens: auto;
      overflow-wrap: break-word;
      text-rendering: optimizeLegibility;
      font-kerning: normal;
    }
    @media (max-width: 600px) {
      body {
        font-size: 0.9em;
        padding: 12px;
      }
      h1 {
        font-size: 1.8em;
      }
    }
    @media print {
      html {
        background-color: white;
      }
      body {
        background-color: transparent;
        color: black;
        font-size: 12pt;
      }
      p, h2, h3 {
        orphans: 3;
        widows: 3;
      }
      h2, h3, h4 {
        page-break-after: avoid;
      }
    }
    p {
      margin: 1em 0;
    }
    a {
      color: #1a1a1a;
    }
    a:visited {
      color: #1a1a1a;
    }
    img {
      max-width: 100%;
    }
    svg {
      height: auto;
      max-width: 100%;
    }
    h1, h2, h3, h4, h5, h6 {
      margin-top: 1.4em;
    }
    h5, h6 {
      font-size: 1em;
      font-style: italic;
    }
    h6 {
      font-weight: normal;
    }
    ol, ul {
      padding-left: 1.7em;
      margin-top: 1em;
    }
    li > ol, li > ul {
      margin-top: 0;
    }
    blockquote {
      margin: 1em 0 1em 1.7em;
      padding-left: 1em;
      border-left: 2px solid #e6e6e6;
      color: #606060;
    }
    code {
      font-family: Menlo, Monaco, Consolas, 'Lucida Console', monospace;
      font-size: 85%;
      margin: 0;
      hyphens: manual;
    }
    pre {
      margin: 1em 0;
      overflow: auto;
    }
    pre code {
      padding: 0;
      overflow: visible;
      overflow-wrap: normal;
    }
    .sourceCode {
     background-color: transparent;
     overflow: visible;
    }
    hr {
      background-color: #1a1a1a;
      border: none;
      height: 1px;
      margin: 1em 0;
    }
    table {
      margin: 1em 0;
      border-collapse: collapse;
      width: 100%;
      overflow-x: auto;
      display: block;
      font-variant-numeric: lining-nums tabular-nums;
    }
    table caption {
      margin-bottom: 0.75em;
    }
    tbody {
      margin-top: 0.5em;
      border-top: 1px solid #1a1a1a;
      border-bottom: 1px solid #1a1a1a;
    }
    th {
      border-top: 1px solid #1a1a1a;
      padding: 0.25em 0.5em 0.25em 0.5em;
    }
    td {
      padding: 0.125em 0.5em 0.25em 0.5em;
    }
    header {
      margin-bottom: 4em;
      text-align: center;
    }
    #TOC li {
      list-style: none;
    }
    #TOC ul {
      padding-left: 1.3em;
    }
    #TOC > ul {
      padding-left: 0;
    }
    #TOC a:not(:hover) {
      text-decoration: none;
    }
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    div.columns{display: flex; gap: min(4vw, 1.5em);}
    div.column{flex: auto; overflow-x: auto;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    /* The extra [class] is a hack that increases specificity enough to
       override a similar rule in reveal.js */
    ul.task-list[class]{list-style: none;}
    ul.task-list li input[type="checkbox"] {
      font-size: inherit;
      width: 0.8em;
      margin: 0 0.8em 0.2em -1.6em;
      vertical-align: middle;
    }
    .display.math{display: block; text-align: center; margin: 0.5rem auto;}
    /* CSS for syntax highlighting */
    pre > code.sourceCode { white-space: pre; position: relative; }
    pre > code.sourceCode > span { line-height: 1.25; }
    pre > code.sourceCode > span:empty { height: 1.2em; }
    .sourceCode { overflow: visible; }
    code.sourceCode > span { color: inherit; text-decoration: inherit; }
    div.sourceCode { margin: 1em 0; }
    pre.sourceCode { margin: 0; }
    @media screen {
    div.sourceCode { overflow: auto; }
    }
    @media print {
    pre > code.sourceCode { white-space: pre-wrap; }
    pre > code.sourceCode > span { display: inline-block; text-indent: -5em; padding-left: 5em; }
    }
    pre.numberSource code
      { counter-reset: source-line 0; }
    pre.numberSource code > span
      { position: relative; left: -4em; counter-increment: source-line; }
    pre.numberSource code > span > a:first-child::before
      { content: counter(source-line);
        position: relative; left: -1em; text-align: right; vertical-align: baseline;
        border: none; display: inline-block;
        -webkit-touch-callout: none; -webkit-user-select: none;
        -khtml-user-select: none; -moz-user-select: none;
        -ms-user-select: none; user-select: none;
        padding: 0 4px; width: 4em;
        color: #aaaaaa;
      }
    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }
    div.sourceCode
      {   }
    @media screen {
    pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }
    }
    code span.al { color: #ff0000; font-weight: bold; } /* Alert */
    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
    code span.at { color: #7d9029; } /* Attribute */
    code span.bn { color: #40a070; } /* BaseN */
    code span.bu { color: #008000; } /* BuiltIn */
    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
    code span.ch { color: #4070a0; } /* Char */
    code span.cn { color: #880000; } /* Constant */
    code span.co { color: #60a0b0; font-style: italic; } /* Comment */
    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
    code span.do { color: #ba2121; font-style: italic; } /* Documentation */
    code span.dt { color: #902000; } /* DataType */
    code span.dv { color: #40a070; } /* DecVal */
    code span.er { color: #ff0000; font-weight: bold; } /* Error */
    code span.ex { } /* Extension */
    code span.fl { color: #40a070; } /* Float */
    code span.fu { color: #06287e; } /* Function */
    code span.im { color: #008000; font-weight: bold; } /* Import */
    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
    code span.kw { color: #007020; font-weight: bold; } /* Keyword */
    code span.op { color: #666666; } /* Operator */
    code span.ot { color: #007020; } /* Other */
    code span.pp { color: #bc7a00; } /* Preprocessor */
    code span.sc { color: #4070a0; } /* SpecialChar */
    code span.ss { color: #bb6688; } /* SpecialString */
    code span.st { color: #4070a0; } /* String */
    code span.va { color: #19177c; } /* Variable */
    code span.vs { color: #4070a0; } /* VerbatimString */
    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
  </style>
</head>
<body>
<div class="sourceCode" id="cb1"><pre class="sourceCode js"><code class="sourceCode javascript"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> assert <span class="op">=</span> <span class="pp">require</span>(<span class="st">&#39;node:assert&#39;</span>)<span class="op">;</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> { rollup } <span class="op">=</span> <span class="pp">require</span>(<span class="st">&#39;../../dist/rollup&#39;</span>)<span class="op">;</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> { loader } <span class="op">=</span> <span class="pp">require</span>(<span class="st">&#39;../utils.js&#39;</span>)<span class="op">;</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> { compareError } <span class="op">=</span> <span class="pp">require</span>(<span class="st">&#39;../utils.js&#39;</span>)<span class="op">;</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="kw">function</span> <span class="fu">runTestCode</span>(code<span class="op">,</span> globals) {</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>    <span class="kw">const</span> globalsWithAssert <span class="op">=</span> { <span class="op">...</span>globals<span class="op">,</span> assert }<span class="op">;</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>    <span class="kw">const</span> globalKeys <span class="op">=</span> <span class="bu">Object</span><span class="op">.</span><span class="fu">keys</span>(globalsWithAssert)<span class="op">;</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>    <span class="kw">const</span> function_ <span class="op">=</span> <span class="kw">new</span> <span class="bu">Function</span>(globalKeys<span class="op">,</span> code)<span class="op">;</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>    function_<span class="op">.</span><span class="fu">apply</span>(</span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>        globals<span class="op">,</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>        globalKeys<span class="op">.</span><span class="fu">map</span>(key <span class="kw">=&gt;</span> globalsWithAssert[key])</span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>    )<span class="op">;</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a><span class="kw">function</span> <span class="fu">runIifeTest</span>(code<span class="op">,</span> outputOptions) {</span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a>    <span class="kw">const</span> bundleName <span class="op">=</span> outputOptions<span class="op">.</span><span class="at">name</span><span class="op">.</span><span class="fu">split</span>(<span class="st">&#39;.&#39;</span>)[<span class="dv">0</span>]<span class="op">;</span></span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a>    <span class="kw">const</span> globals <span class="op">=</span> { <span class="dt">external</span><span class="op">:</span> <span class="st">&#39;external&#39;</span><span class="op">,</span> <span class="dt">__exports</span><span class="op">:</span> {} }<span class="op">;</span></span>
<span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a>    <span class="fu">runTestCode</span>(</span>
<span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a>        bundleName <span class="op">&amp;&amp;</span> <span class="op">!</span>bundleName<span class="op">.</span><span class="fu">includes</span>(<span class="st">&#39;@&#39;</span>)</span>
<span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a>            <span class="op">?</span> <span class="vs">`</span><span class="sc">${</span>code<span class="sc">}</span><span class="vs">if (typeof </span><span class="sc">${</span>bundleName<span class="sc">}</span><span class="vs"> !== &#39;undefined&#39;) __exports.</span><span class="sc">${</span>bundleName<span class="sc">}</span><span class="vs"> = </span><span class="sc">${</span>bundleName<span class="sc">}</span><span class="vs">;`</span></span>
<span id="cb1-22"><a href="#cb1-22" aria-hidden="true" tabindex="-1"></a>            <span class="op">:</span> code<span class="op">,</span></span>
<span id="cb1-23"><a href="#cb1-23" aria-hidden="true" tabindex="-1"></a>        globals</span>
<span id="cb1-24"><a href="#cb1-24" aria-hidden="true" tabindex="-1"></a>    )<span class="op">;</span></span>
<span id="cb1-25"><a href="#cb1-25" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="fu">getIifeExports</span>(globals<span class="op">.</span><span class="at">__exports</span>[bundleName] <span class="op">?</span> globals<span class="op">.</span><span class="at">__exports</span> <span class="op">:</span> globals<span class="op">,</span> outputOptions)<span class="op">;</span></span>
<span id="cb1-26"><a href="#cb1-26" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb1-27"><a href="#cb1-27" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-28"><a href="#cb1-28" aria-hidden="true" tabindex="-1"></a><span class="kw">function</span> <span class="fu">getIifeExports</span>(<span class="bu">global</span><span class="op">,</span> outputOptions) {</span>
<span id="cb1-29"><a href="#cb1-29" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> (outputOptions<span class="op">.</span><span class="at">name</span>) {</span>
<span id="cb1-30"><a href="#cb1-30" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> outputOptions<span class="op">.</span><span class="at">name</span></span>
<span id="cb1-31"><a href="#cb1-31" aria-hidden="true" tabindex="-1"></a>            <span class="op">.</span><span class="fu">split</span>(<span class="st">&#39;.&#39;</span>)</span>
<span id="cb1-32"><a href="#cb1-32" aria-hidden="true" tabindex="-1"></a>            <span class="op">.</span><span class="fu">reduce</span>((currentVariable<span class="op">,</span> nextKey) <span class="kw">=&gt;</span> currentVariable[nextKey] <span class="op">||</span> {}<span class="op">,</span> <span class="bu">global</span>)<span class="op">;</span></span>
<span id="cb1-33"><a href="#cb1-33" aria-hidden="true" tabindex="-1"></a>    }</span>
<span id="cb1-34"><a href="#cb1-34" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> {}<span class="op">;</span></span>
<span id="cb1-35"><a href="#cb1-35" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb1-36"><a href="#cb1-36" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-37"><a href="#cb1-37" aria-hidden="true" tabindex="-1"></a><span class="kw">function</span> <span class="fu">getIifeCode</span>(inputCode<span class="op">,</span> outputOptions) {</span>
<span id="cb1-38"><a href="#cb1-38" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="fu">rollup</span>({</span>
<span id="cb1-39"><a href="#cb1-39" aria-hidden="true" tabindex="-1"></a>        <span class="dt">input</span><span class="op">:</span> <span class="st">&#39;input&#39;</span><span class="op">,</span></span>
<span id="cb1-40"><a href="#cb1-40" aria-hidden="true" tabindex="-1"></a>        <span class="dt">external</span><span class="op">:</span> [<span class="st">&#39;external&#39;</span>]<span class="op">,</span></span>
<span id="cb1-41"><a href="#cb1-41" aria-hidden="true" tabindex="-1"></a>        <span class="dt">plugins</span><span class="op">:</span> [<span class="fu">loader</span>({ <span class="dt">input</span><span class="op">:</span> inputCode })]</span>
<span id="cb1-42"><a href="#cb1-42" aria-hidden="true" tabindex="-1"></a>    })</span>
<span id="cb1-43"><a href="#cb1-43" aria-hidden="true" tabindex="-1"></a>        <span class="op">.</span><span class="fu">then</span>(bundle <span class="kw">=&gt;</span></span>
<span id="cb1-44"><a href="#cb1-44" aria-hidden="true" tabindex="-1"></a>            bundle<span class="op">.</span><span class="fu">generate</span>({ <span class="dt">format</span><span class="op">:</span> <span class="st">&#39;iife&#39;</span><span class="op">,</span> <span class="dt">globals</span><span class="op">:</span> { <span class="dt">external</span><span class="op">:</span> <span class="st">&#39;external&#39;</span> }<span class="op">,</span> <span class="op">...</span>outputOptions })</span>
<span id="cb1-45"><a href="#cb1-45" aria-hidden="true" tabindex="-1"></a>        )</span>
<span id="cb1-46"><a href="#cb1-46" aria-hidden="true" tabindex="-1"></a>        <span class="op">.</span><span class="fu">then</span>(({ output }) <span class="kw">=&gt;</span> output[<span class="dv">0</span>]<span class="op">.</span><span class="at">code</span>)<span class="op">;</span></span>
<span id="cb1-47"><a href="#cb1-47" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb1-48"><a href="#cb1-48" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-49"><a href="#cb1-49" aria-hidden="true" tabindex="-1"></a><span class="kw">function</span> <span class="fu">runTestsWithCode</span>(code<span class="op">,</span> outputOptions<span class="op">,</span> expectedExports) {</span>
<span id="cb1-50"><a href="#cb1-50" aria-hidden="true" tabindex="-1"></a>    <span class="fu">it</span>(<span class="st">&#39;works with extend=false&#39;</span><span class="op">,</span> () <span class="kw">=&gt;</span> {</span>
<span id="cb1-51"><a href="#cb1-51" aria-hidden="true" tabindex="-1"></a>        <span class="kw">const</span> options <span class="op">=</span> { <span class="dt">extend</span><span class="op">:</span> <span class="kw">false</span><span class="op">,</span> <span class="op">...</span>outputOptions }<span class="op">;</span></span>
<span id="cb1-52"><a href="#cb1-52" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="fu">getIifeCode</span>(code<span class="op">,</span> options)<span class="op">.</span><span class="fu">then</span>(code <span class="kw">=&gt;</span></span>
<span id="cb1-53"><a href="#cb1-53" aria-hidden="true" tabindex="-1"></a>            assert<span class="op">.</span><span class="fu">deepEqual</span>(<span class="fu">runIifeTest</span>(code<span class="op">,</span> options)<span class="op">,</span> expectedExports<span class="op">,</span> <span class="st">&#39;expected exports are returned&#39;</span>)</span>
<span id="cb1-54"><a href="#cb1-54" aria-hidden="true" tabindex="-1"></a>        )<span class="op">;</span></span>
<span id="cb1-55"><a href="#cb1-55" aria-hidden="true" tabindex="-1"></a>    })<span class="op">;</span></span>
<span id="cb1-56"><a href="#cb1-56" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-57"><a href="#cb1-57" aria-hidden="true" tabindex="-1"></a>    <span class="fu">it</span>(<span class="st">&#39;works with extend=true&#39;</span><span class="op">,</span> () <span class="kw">=&gt;</span> {</span>
<span id="cb1-58"><a href="#cb1-58" aria-hidden="true" tabindex="-1"></a>        <span class="kw">const</span> options <span class="op">=</span> { <span class="dt">extend</span><span class="op">:</span> <span class="kw">true</span><span class="op">,</span> <span class="op">...</span>outputOptions }<span class="op">;</span></span>
<span id="cb1-59"><a href="#cb1-59" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="fu">getIifeCode</span>(code<span class="op">,</span> options)<span class="op">.</span><span class="fu">then</span>(code <span class="kw">=&gt;</span></span>
<span id="cb1-60"><a href="#cb1-60" aria-hidden="true" tabindex="-1"></a>            assert<span class="op">.</span><span class="fu">deepEqual</span>(<span class="fu">runIifeTest</span>(code<span class="op">,</span> options)<span class="op">,</span> expectedExports<span class="op">,</span> <span class="st">&#39;expected exports are returned&#39;</span>)</span>
<span id="cb1-61"><a href="#cb1-61" aria-hidden="true" tabindex="-1"></a>        )<span class="op">;</span></span>
<span id="cb1-62"><a href="#cb1-62" aria-hidden="true" tabindex="-1"></a>    })<span class="op">;</span></span>
<span id="cb1-63"><a href="#cb1-63" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb1-64"><a href="#cb1-64" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-65"><a href="#cb1-65" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> (<span class="kw">const</span> name <span class="kw">of</span> [<span class="st">&#39;bundle&#39;</span><span class="op">,</span> <span class="st">&#39;@my.@nested/value.bundle&#39;</span>])</span>
<span id="cb1-66"><a href="#cb1-66" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> (<span class="kw">const</span> compact <span class="kw">of</span> [<span class="kw">false</span><span class="op">,</span> <span class="kw">true</span>])</span>
<span id="cb1-67"><a href="#cb1-67" aria-hidden="true" tabindex="-1"></a>        <span class="fu">describe</span>(<span class="vs">`The IIFE wrapper with name=&quot;</span><span class="sc">${</span>name<span class="sc">}</span><span class="vs">&quot;, compact=</span><span class="sc">${</span>compact<span class="sc">}</span><span class="vs">`</span><span class="op">,</span> () <span class="kw">=&gt;</span> {</span>
<span id="cb1-68"><a href="#cb1-68" aria-hidden="true" tabindex="-1"></a>            <span class="kw">const</span> outputOptions <span class="op">=</span> { compact<span class="op">,</span> name }<span class="op">;</span></span>
<span id="cb1-69"><a href="#cb1-69" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-70"><a href="#cb1-70" aria-hidden="true" tabindex="-1"></a>            <span class="fu">describe</span>(<span class="st">&#39;creating a bundle with neither exports nor imports&#39;</span><span class="op">,</span> () <span class="kw">=&gt;</span></span>
<span id="cb1-71"><a href="#cb1-71" aria-hidden="true" tabindex="-1"></a>                <span class="fu">runTestsWithCode</span>(<span class="st">&#39;assert.ok(true);&#39;</span><span class="op">,</span> outputOptions<span class="op">,</span> {}))<span class="op">;</span></span>
<span id="cb1-72"><a href="#cb1-72" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-73"><a href="#cb1-73" aria-hidden="true" tabindex="-1"></a>            <span class="fu">describe</span>(<span class="st">&#39;creating a bundle with named exports&#39;</span><span class="op">,</span> () <span class="kw">=&gt;</span></span>
<span id="cb1-74"><a href="#cb1-74" aria-hidden="true" tabindex="-1"></a>                <span class="fu">runTestsWithCode</span>(<span class="st">&#39;export const x = 42;&#39;</span><span class="op">,</span> outputOptions<span class="op">,</span> { <span class="dt">x</span><span class="op">:</span> <span class="dv">42</span> }))<span class="op">;</span></span>
<span id="cb1-75"><a href="#cb1-75" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-76"><a href="#cb1-76" aria-hidden="true" tabindex="-1"></a>            <span class="fu">describe</span>(<span class="st">&#39;creating a bundle with a default export&#39;</span><span class="op">,</span> () <span class="kw">=&gt;</span></span>
<span id="cb1-77"><a href="#cb1-77" aria-hidden="true" tabindex="-1"></a>                <span class="fu">runTestsWithCode</span>(<span class="st">&#39;export default {value: 42};&#39;</span><span class="op">,</span> outputOptions<span class="op">,</span> { <span class="dt">value</span><span class="op">:</span> <span class="dv">42</span> }))<span class="op">;</span></span>
<span id="cb1-78"><a href="#cb1-78" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-79"><a href="#cb1-79" aria-hidden="true" tabindex="-1"></a>            <span class="fu">describe</span>(<span class="st">&#39;creating a bundle with an external import&#39;</span><span class="op">,</span> () <span class="kw">=&gt;</span></span>
<span id="cb1-80"><a href="#cb1-80" aria-hidden="true" tabindex="-1"></a>                <span class="fu">runTestsWithCode</span>(</span>
<span id="cb1-81"><a href="#cb1-81" aria-hidden="true" tabindex="-1"></a>                    <span class="st">&#39;import value from &quot;external&quot;; assert.equal(value, &quot;external&quot;);&#39;</span><span class="op">,</span></span>
<span id="cb1-82"><a href="#cb1-82" aria-hidden="true" tabindex="-1"></a>                    outputOptions<span class="op">,</span></span>
<span id="cb1-83"><a href="#cb1-83" aria-hidden="true" tabindex="-1"></a>                    {}</span>
<span id="cb1-84"><a href="#cb1-84" aria-hidden="true" tabindex="-1"></a>                ))<span class="op">;</span></span>
<span id="cb1-85"><a href="#cb1-85" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-86"><a href="#cb1-86" aria-hidden="true" tabindex="-1"></a>            <span class="fu">describe</span>(<span class="st">&#39;creating a bundle with an external import and named exports&#39;</span><span class="op">,</span> () <span class="kw">=&gt;</span></span>
<span id="cb1-87"><a href="#cb1-87" aria-hidden="true" tabindex="-1"></a>                <span class="fu">runTestsWithCode</span>(<span class="st">&#39;import value from &quot;external&quot;; export const x = value;&#39;</span><span class="op">,</span> outputOptions<span class="op">,</span> {</span>
<span id="cb1-88"><a href="#cb1-88" aria-hidden="true" tabindex="-1"></a>                    <span class="dt">x</span><span class="op">:</span> <span class="st">&#39;external&#39;</span></span>
<span id="cb1-89"><a href="#cb1-89" aria-hidden="true" tabindex="-1"></a>                }))<span class="op">;</span></span>
<span id="cb1-90"><a href="#cb1-90" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-91"><a href="#cb1-91" aria-hidden="true" tabindex="-1"></a>            <span class="fu">describe</span>(<span class="st">&#39;creating a bundle with an external import and a default export&#39;</span><span class="op">,</span> () <span class="kw">=&gt;</span></span>
<span id="cb1-92"><a href="#cb1-92" aria-hidden="true" tabindex="-1"></a>                <span class="fu">runTestsWithCode</span>(<span class="st">&#39;import value from &quot;external&quot;; export default {value};&#39;</span><span class="op">,</span> outputOptions<span class="op">,</span> {</span>
<span id="cb1-93"><a href="#cb1-93" aria-hidden="true" tabindex="-1"></a>                    <span class="dt">value</span><span class="op">:</span> <span class="st">&#39;external&#39;</span></span>
<span id="cb1-94"><a href="#cb1-94" aria-hidden="true" tabindex="-1"></a>                }))<span class="op">;</span></span>
<span id="cb1-95"><a href="#cb1-95" aria-hidden="true" tabindex="-1"></a>        })<span class="op">;</span></span>
<span id="cb1-96"><a href="#cb1-96" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-97"><a href="#cb1-97" aria-hidden="true" tabindex="-1"></a><span class="fu">describe</span>(<span class="st">&#39;The IIFE wrapper with an illegal name&#39;</span><span class="op">,</span> () <span class="kw">=&gt;</span> {</span>
<span id="cb1-98"><a href="#cb1-98" aria-hidden="true" tabindex="-1"></a>    <span class="fu">it</span>(<span class="st">&#39;fails if the name starts with a digit&#39;</span><span class="op">,</span> () <span class="kw">=&gt;</span></span>
<span id="cb1-99"><a href="#cb1-99" aria-hidden="true" tabindex="-1"></a>        <span class="fu">getIifeCode</span>(<span class="st">&#39;export const x = 42;&#39;</span><span class="op">,</span> { <span class="dt">name</span><span class="op">:</span> <span class="st">&#39;1name&#39;</span> })</span>
<span id="cb1-100"><a href="#cb1-100" aria-hidden="true" tabindex="-1"></a>            <span class="op">.</span><span class="fu">then</span>(() <span class="kw">=&gt;</span> {</span>
<span id="cb1-101"><a href="#cb1-101" aria-hidden="true" tabindex="-1"></a>                <span class="cf">throw</span> <span class="kw">new</span> <span class="bu">Error</span>(<span class="st">&#39;Expected an error to be thrown.&#39;</span>)<span class="op">;</span></span>
<span id="cb1-102"><a href="#cb1-102" aria-hidden="true" tabindex="-1"></a>            })</span>
<span id="cb1-103"><a href="#cb1-103" aria-hidden="true" tabindex="-1"></a>            <span class="op">.</span><span class="fu">catch</span>(error <span class="kw">=&gt;</span></span>
<span id="cb1-104"><a href="#cb1-104" aria-hidden="true" tabindex="-1"></a>                <span class="fu">compareError</span>(error<span class="op">,</span> {</span>
<span id="cb1-105"><a href="#cb1-105" aria-hidden="true" tabindex="-1"></a>                    <span class="dt">code</span><span class="op">:</span> <span class="st">&#39;ILLEGAL_IDENTIFIER_AS_NAME&#39;</span><span class="op">,</span></span>
<span id="cb1-106"><a href="#cb1-106" aria-hidden="true" tabindex="-1"></a>                    <span class="dt">message</span><span class="op">:</span></span>
<span id="cb1-107"><a href="#cb1-107" aria-hidden="true" tabindex="-1"></a>                        <span class="st">&#39;Given name &quot;1name&quot; is not a legal JS identifier. If you need this, you can try &quot;output.extend: true&quot;.&#39;</span><span class="op">,</span></span>
<span id="cb1-108"><a href="#cb1-108" aria-hidden="true" tabindex="-1"></a>                    <span class="dt">url</span><span class="op">:</span> <span class="st">&#39;https://rollupjs.org/configuration-options/#output-extend&#39;</span></span>
<span id="cb1-109"><a href="#cb1-109" aria-hidden="true" tabindex="-1"></a>                })</span>
<span id="cb1-110"><a href="#cb1-110" aria-hidden="true" tabindex="-1"></a>            ))<span class="op">;</span></span>
<span id="cb1-111"><a href="#cb1-111" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-112"><a href="#cb1-112" aria-hidden="true" tabindex="-1"></a>    <span class="fu">it</span>(<span class="st">&#39;fails if the name contains an illegal character&#39;</span><span class="op">,</span> () <span class="kw">=&gt;</span></span>
<span id="cb1-113"><a href="#cb1-113" aria-hidden="true" tabindex="-1"></a>        <span class="fu">getIifeCode</span>(<span class="st">&#39;export const x = 42;&#39;</span><span class="op">,</span> { <span class="dt">name</span><span class="op">:</span> <span class="st">&#39;my=name&#39;</span> })</span>
<span id="cb1-114"><a href="#cb1-114" aria-hidden="true" tabindex="-1"></a>            <span class="op">.</span><span class="fu">then</span>(() <span class="kw">=&gt;</span> {</span>
<span id="cb1-115"><a href="#cb1-115" aria-hidden="true" tabindex="-1"></a>                <span class="cf">throw</span> <span class="kw">new</span> <span class="bu">Error</span>(<span class="st">&#39;Expected an error to be thrown.&#39;</span>)<span class="op">;</span></span>
<span id="cb1-116"><a href="#cb1-116" aria-hidden="true" tabindex="-1"></a>            })</span>
<span id="cb1-117"><a href="#cb1-117" aria-hidden="true" tabindex="-1"></a>            <span class="op">.</span><span class="fu">catch</span>(error <span class="kw">=&gt;</span></span>
<span id="cb1-118"><a href="#cb1-118" aria-hidden="true" tabindex="-1"></a>                <span class="fu">compareError</span>(error<span class="op">,</span> {</span>
<span id="cb1-119"><a href="#cb1-119" aria-hidden="true" tabindex="-1"></a>                    <span class="dt">code</span><span class="op">:</span> <span class="st">&#39;ILLEGAL_IDENTIFIER_AS_NAME&#39;</span><span class="op">,</span></span>
<span id="cb1-120"><a href="#cb1-120" aria-hidden="true" tabindex="-1"></a>                    <span class="dt">message</span><span class="op">:</span></span>
<span id="cb1-121"><a href="#cb1-121" aria-hidden="true" tabindex="-1"></a>                        <span class="st">&#39;Given name &quot;my=name&quot; is not a legal JS identifier. If you need this, you can try &quot;output.extend: true&quot;.&#39;</span><span class="op">,</span></span>
<span id="cb1-122"><a href="#cb1-122" aria-hidden="true" tabindex="-1"></a>                    <span class="dt">url</span><span class="op">:</span> <span class="st">&#39;https://rollupjs.org/configuration-options/#output-extend&#39;</span></span>
<span id="cb1-123"><a href="#cb1-123" aria-hidden="true" tabindex="-1"></a>                })</span>
<span id="cb1-124"><a href="#cb1-124" aria-hidden="true" tabindex="-1"></a>            ))<span class="op">;</span></span>
<span id="cb1-125"><a href="#cb1-125" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-126"><a href="#cb1-126" aria-hidden="true" tabindex="-1"></a>    <span class="fu">it</span>(<span class="st">&#39;does not fail for illegal characters if the extend option is used&#39;</span><span class="op">,</span> () <span class="kw">=&gt;</span></span>
<span id="cb1-127"><a href="#cb1-127" aria-hidden="true" tabindex="-1"></a>        <span class="fu">getIifeCode</span>(<span class="st">&#39;export const x = 42;&#39;</span><span class="op">,</span> { <span class="dt">name</span><span class="op">:</span> <span class="st">&#39;my=name&#39;</span><span class="op">,</span> <span class="dt">extend</span><span class="op">:</span> <span class="kw">true</span> })<span class="op">.</span><span class="fu">then</span>(code <span class="kw">=&gt;</span></span>
<span id="cb1-128"><a href="#cb1-128" aria-hidden="true" tabindex="-1"></a>            assert<span class="op">.</span><span class="fu">strictEqual</span>(</span>
<span id="cb1-129"><a href="#cb1-129" aria-hidden="true" tabindex="-1"></a>                code<span class="op">,</span></span>
<span id="cb1-130"><a href="#cb1-130" aria-hidden="true" tabindex="-1"></a>                <span class="st">&#39;(function (exports) {</span><span class="sc">\n</span><span class="st">&#39;</span> <span class="op">+</span></span>
<span id="cb1-131"><a href="#cb1-131" aria-hidden="true" tabindex="-1"></a>                    <span class="st">&quot;</span><span class="sc">\t</span><span class="st">&#39;use strict&#39;;</span><span class="sc">\n</span><span class="st">&quot;</span> <span class="op">+</span></span>
<span id="cb1-132"><a href="#cb1-132" aria-hidden="true" tabindex="-1"></a>                    <span class="st">&#39;</span><span class="sc">\n</span><span class="st">&#39;</span> <span class="op">+</span></span>
<span id="cb1-133"><a href="#cb1-133" aria-hidden="true" tabindex="-1"></a>                    <span class="st">&#39;</span><span class="sc">\t</span><span class="st">const x = 42;</span><span class="sc">\n</span><span class="st">&#39;</span> <span class="op">+</span></span>
<span id="cb1-134"><a href="#cb1-134" aria-hidden="true" tabindex="-1"></a>                    <span class="st">&#39;</span><span class="sc">\n</span><span class="st">&#39;</span> <span class="op">+</span></span>
<span id="cb1-135"><a href="#cb1-135" aria-hidden="true" tabindex="-1"></a>                    <span class="st">&#39;</span><span class="sc">\t</span><span class="st">exports.x = x;</span><span class="sc">\n</span><span class="st">&#39;</span> <span class="op">+</span></span>
<span id="cb1-136"><a href="#cb1-136" aria-hidden="true" tabindex="-1"></a>                    <span class="st">&#39;</span><span class="sc">\n</span><span class="st">&#39;</span> <span class="op">+</span></span>
<span id="cb1-137"><a href="#cb1-137" aria-hidden="true" tabindex="-1"></a>                    <span class="st">&#39;})(this[&quot;my=name&quot;] = this[&quot;my=name&quot;] || {});</span><span class="sc">\n</span><span class="st">&#39;</span></span>
<span id="cb1-138"><a href="#cb1-138" aria-hidden="true" tabindex="-1"></a>            )</span>
<span id="cb1-139"><a href="#cb1-139" aria-hidden="true" tabindex="-1"></a>        ))<span class="op">;</span></span>
<span id="cb1-140"><a href="#cb1-140" aria-hidden="true" tabindex="-1"></a>})<span class="op">;</span></span></code></pre></div>
</body>
</html>
