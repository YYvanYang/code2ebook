<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="" xml:lang="">
<head>
  <meta charset="utf-8" />
  <meta name="generator" content="pandoc" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
  <title>mod</title>
  <style>
    html {
      color: #1a1a1a;
      background-color: #fdfdfd;
    }
    body {
      margin: 0 auto;
      max-width: 36em;
      padding-left: 50px;
      padding-right: 50px;
      padding-top: 50px;
      padding-bottom: 50px;
      hyphens: auto;
      overflow-wrap: break-word;
      text-rendering: optimizeLegibility;
      font-kerning: normal;
    }
    @media (max-width: 600px) {
      body {
        font-size: 0.9em;
        padding: 12px;
      }
      h1 {
        font-size: 1.8em;
      }
    }
    @media print {
      html {
        background-color: white;
      }
      body {
        background-color: transparent;
        color: black;
        font-size: 12pt;
      }
      p, h2, h3 {
        orphans: 3;
        widows: 3;
      }
      h2, h3, h4 {
        page-break-after: avoid;
      }
    }
    p {
      margin: 1em 0;
    }
    a {
      color: #1a1a1a;
    }
    a:visited {
      color: #1a1a1a;
    }
    img {
      max-width: 100%;
    }
    svg {
      height: auto;
      max-width: 100%;
    }
    h1, h2, h3, h4, h5, h6 {
      margin-top: 1.4em;
    }
    h5, h6 {
      font-size: 1em;
      font-style: italic;
    }
    h6 {
      font-weight: normal;
    }
    ol, ul {
      padding-left: 1.7em;
      margin-top: 1em;
    }
    li > ol, li > ul {
      margin-top: 0;
    }
    blockquote {
      margin: 1em 0 1em 1.7em;
      padding-left: 1em;
      border-left: 2px solid #e6e6e6;
      color: #606060;
    }
    code {
      font-family: Menlo, Monaco, Consolas, 'Lucida Console', monospace;
      font-size: 85%;
      margin: 0;
      hyphens: manual;
    }
    pre {
      margin: 1em 0;
      overflow: auto;
    }
    pre code {
      padding: 0;
      overflow: visible;
      overflow-wrap: normal;
    }
    .sourceCode {
     background-color: transparent;
     overflow: visible;
    }
    hr {
      background-color: #1a1a1a;
      border: none;
      height: 1px;
      margin: 1em 0;
    }
    table {
      margin: 1em 0;
      border-collapse: collapse;
      width: 100%;
      overflow-x: auto;
      display: block;
      font-variant-numeric: lining-nums tabular-nums;
    }
    table caption {
      margin-bottom: 0.75em;
    }
    tbody {
      margin-top: 0.5em;
      border-top: 1px solid #1a1a1a;
      border-bottom: 1px solid #1a1a1a;
    }
    th {
      border-top: 1px solid #1a1a1a;
      padding: 0.25em 0.5em 0.25em 0.5em;
    }
    td {
      padding: 0.125em 0.5em 0.25em 0.5em;
    }
    header {
      margin-bottom: 4em;
      text-align: center;
    }
    #TOC li {
      list-style: none;
    }
    #TOC ul {
      padding-left: 1.3em;
    }
    #TOC > ul {
      padding-left: 0;
    }
    #TOC a:not(:hover) {
      text-decoration: none;
    }
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    div.columns{display: flex; gap: min(4vw, 1.5em);}
    div.column{flex: auto; overflow-x: auto;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    /* The extra [class] is a hack that increases specificity enough to
       override a similar rule in reveal.js */
    ul.task-list[class]{list-style: none;}
    ul.task-list li input[type="checkbox"] {
      font-size: inherit;
      width: 0.8em;
      margin: 0 0.8em 0.2em -1.6em;
      vertical-align: middle;
    }
    .display.math{display: block; text-align: center; margin: 0.5rem auto;}
    /* CSS for syntax highlighting */
    pre > code.sourceCode { white-space: pre; position: relative; }
    pre > code.sourceCode > span { line-height: 1.25; }
    pre > code.sourceCode > span:empty { height: 1.2em; }
    .sourceCode { overflow: visible; }
    code.sourceCode > span { color: inherit; text-decoration: inherit; }
    div.sourceCode { margin: 1em 0; }
    pre.sourceCode { margin: 0; }
    @media screen {
    div.sourceCode { overflow: auto; }
    }
    @media print {
    pre > code.sourceCode { white-space: pre-wrap; }
    pre > code.sourceCode > span { display: inline-block; text-indent: -5em; padding-left: 5em; }
    }
    pre.numberSource code
      { counter-reset: source-line 0; }
    pre.numberSource code > span
      { position: relative; left: -4em; counter-increment: source-line; }
    pre.numberSource code > span > a:first-child::before
      { content: counter(source-line);
        position: relative; left: -1em; text-align: right; vertical-align: baseline;
        border: none; display: inline-block;
        -webkit-touch-callout: none; -webkit-user-select: none;
        -khtml-user-select: none; -moz-user-select: none;
        -ms-user-select: none; user-select: none;
        padding: 0 4px; width: 4em;
        color: #aaaaaa;
      }
    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }
    div.sourceCode
      {   }
    @media screen {
    pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }
    }
    code span.al { color: #ff0000; font-weight: bold; } /* Alert */
    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
    code span.at { color: #7d9029; } /* Attribute */
    code span.bn { color: #40a070; } /* BaseN */
    code span.bu { color: #008000; } /* BuiltIn */
    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
    code span.ch { color: #4070a0; } /* Char */
    code span.cn { color: #880000; } /* Constant */
    code span.co { color: #60a0b0; font-style: italic; } /* Comment */
    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
    code span.do { color: #ba2121; font-style: italic; } /* Documentation */
    code span.dt { color: #902000; } /* DataType */
    code span.dv { color: #40a070; } /* DecVal */
    code span.er { color: #ff0000; font-weight: bold; } /* Error */
    code span.ex { } /* Extension */
    code span.fl { color: #40a070; } /* Float */
    code span.fu { color: #06287e; } /* Function */
    code span.im { color: #008000; font-weight: bold; } /* Import */
    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
    code span.kw { color: #007020; font-weight: bold; } /* Keyword */
    code span.op { color: #666666; } /* Operator */
    code span.ot { color: #007020; } /* Other */
    code span.pp { color: #bc7a00; } /* Preprocessor */
    code span.sc { color: #4070a0; } /* SpecialChar */
    code span.ss { color: #bb6688; } /* SpecialString */
    code span.st { color: #4070a0; } /* String */
    code span.va { color: #19177c; } /* Variable */
    code span.vs { color: #4070a0; } /* VerbatimString */
    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
  </style>
</head>
<body>
<div class="sourceCode" id="cb1"><pre class="sourceCode rs"><code class="sourceCode rust"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">use</span> <span class="pp">std::sync::</span>Arc<span class="op">;</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="kw">use</span> <span class="kw">crate</span><span class="pp">::</span><span class="op">{</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>  <span class="pp">chunk::</span>ChunkRenderReturn<span class="op">,</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>  <span class="pp">chunk_graph::</span>ChunkGraph<span class="op">,</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>  <span class="pp">error::</span>BatchedResult<span class="op">,</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>  <span class="pp">finalizer::</span>FinalizerContext<span class="op">,</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>  <span class="pp">options::</span><span class="op">{</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>    <span class="pp">file_name_template::</span>FileNameRenderOptions<span class="op">,</span> <span class="pp">normalized_input_options::</span>NormalizedInputOptions<span class="op">,</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>    <span class="pp">normalized_output_options::</span>NormalizedOutputOptions<span class="op">,</span> <span class="pp">output_options::</span>SourceMapType<span class="op">,</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>  <span class="op">},</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>  <span class="pp">stages::link_stage::</span>LinkStageOutput<span class="op">,</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>  <span class="pp">utils::</span><span class="op">{</span>finalize_normal_module<span class="op">,</span> is_in_rust_test_mode<span class="op">,</span> <span class="pp">render_chunks::</span>render_chunks<span class="op">},</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a><span class="kw">use</span> <span class="pp">rolldown_utils::</span>block_on_spawn_all<span class="op">;</span></span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a><span class="kw">use</span> <span class="pp">rolldown_common::</span><span class="op">{</span>ChunkKind<span class="op">,</span> Output<span class="op">,</span> OutputAsset<span class="op">,</span> OutputChunk<span class="op">};</span></span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a><span class="kw">use</span> <span class="pp">rolldown_error::</span>BuildError<span class="op">;</span></span>
<span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a><span class="kw">use</span> <span class="pp">rolldown_plugin::</span>SharedPluginDriver<span class="op">;</span></span>
<span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a><span class="kw">use</span> <span class="pp">rustc_hash::</span>FxHashSet<span class="op">;</span></span>
<span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a><span class="kw">mod</span> code_splitting<span class="op">;</span></span>
<span id="cb1-22"><a href="#cb1-22" aria-hidden="true" tabindex="-1"></a><span class="kw">mod</span> compute_cross_chunk_links<span class="op">;</span></span>
<span id="cb1-23"><a href="#cb1-23" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-24"><a href="#cb1-24" aria-hidden="true" tabindex="-1"></a><span class="kw">pub</span> <span class="kw">struct</span> BundleStage<span class="op">&lt;</span><span class="ot">&#39;a</span><span class="op">&gt;</span> <span class="op">{</span></span>
<span id="cb1-25"><a href="#cb1-25" aria-hidden="true" tabindex="-1"></a>  link_output<span class="op">:</span> <span class="op">&amp;</span><span class="ot">&#39;a</span> <span class="kw">mut</span> LinkStageOutput<span class="op">,</span></span>
<span id="cb1-26"><a href="#cb1-26" aria-hidden="true" tabindex="-1"></a>  output_options<span class="op">:</span> <span class="op">&amp;</span><span class="ot">&#39;a</span> NormalizedOutputOptions<span class="op">,</span></span>
<span id="cb1-27"><a href="#cb1-27" aria-hidden="true" tabindex="-1"></a>  input_options<span class="op">:</span> <span class="op">&amp;</span><span class="ot">&#39;a</span> NormalizedInputOptions<span class="op">,</span></span>
<span id="cb1-28"><a href="#cb1-28" aria-hidden="true" tabindex="-1"></a>  plugin_driver<span class="op">:</span> <span class="op">&amp;</span><span class="ot">&#39;a</span> SharedPluginDriver<span class="op">,</span></span>
<span id="cb1-29"><a href="#cb1-29" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb1-30"><a href="#cb1-30" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-31"><a href="#cb1-31" aria-hidden="true" tabindex="-1"></a><span class="kw">impl</span><span class="op">&lt;</span><span class="ot">&#39;a</span><span class="op">&gt;</span> BundleStage<span class="op">&lt;</span><span class="ot">&#39;a</span><span class="op">&gt;</span> <span class="op">{</span></span>
<span id="cb1-32"><a href="#cb1-32" aria-hidden="true" tabindex="-1"></a>  <span class="kw">pub</span> <span class="kw">fn</span> new(</span>
<span id="cb1-33"><a href="#cb1-33" aria-hidden="true" tabindex="-1"></a>    link_output<span class="op">:</span> <span class="op">&amp;</span><span class="ot">&#39;a</span> <span class="kw">mut</span> LinkStageOutput<span class="op">,</span></span>
<span id="cb1-34"><a href="#cb1-34" aria-hidden="true" tabindex="-1"></a>    input_options<span class="op">:</span> <span class="op">&amp;</span><span class="ot">&#39;a</span> NormalizedInputOptions<span class="op">,</span></span>
<span id="cb1-35"><a href="#cb1-35" aria-hidden="true" tabindex="-1"></a>    output_options<span class="op">:</span> <span class="op">&amp;</span><span class="ot">&#39;a</span> NormalizedOutputOptions<span class="op">,</span></span>
<span id="cb1-36"><a href="#cb1-36" aria-hidden="true" tabindex="-1"></a>    plugin_driver<span class="op">:</span> <span class="op">&amp;</span><span class="ot">&#39;a</span> SharedPluginDriver<span class="op">,</span></span>
<span id="cb1-37"><a href="#cb1-37" aria-hidden="true" tabindex="-1"></a>  ) <span class="op">-&gt;</span> <span class="dt">Self</span> <span class="op">{</span></span>
<span id="cb1-38"><a href="#cb1-38" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Self</span> <span class="op">{</span> link_output<span class="op">,</span> output_options<span class="op">,</span> input_options<span class="op">,</span> plugin_driver <span class="op">}</span></span>
<span id="cb1-39"><a href="#cb1-39" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb1-40"><a href="#cb1-40" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-41"><a href="#cb1-41" aria-hidden="true" tabindex="-1"></a>  <span class="at">#[</span><span class="pp">tracing::</span>instrument<span class="at">(</span>skip_all<span class="at">)]</span></span>
<span id="cb1-42"><a href="#cb1-42" aria-hidden="true" tabindex="-1"></a>  <span class="kw">pub</span> <span class="kw">async</span> <span class="kw">fn</span> bundle(<span class="op">&amp;</span><span class="kw">mut</span> <span class="kw">self</span>) <span class="op">-&gt;</span> BatchedResult<span class="op">&lt;</span><span class="dt">Vec</span><span class="op">&lt;</span>Output<span class="op">&gt;&gt;</span> <span class="op">{</span></span>
<span id="cb1-43"><a href="#cb1-43" aria-hidden="true" tabindex="-1"></a>    <span class="kw">use</span> <span class="pp">rayon::prelude::</span><span class="op">*;</span></span>
<span id="cb1-44"><a href="#cb1-44" aria-hidden="true" tabindex="-1"></a>    <span class="pp">tracing::info!</span>(<span class="st">&quot;Start bundle stage&quot;</span>)<span class="op">;</span></span>
<span id="cb1-45"><a href="#cb1-45" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> <span class="kw">mut</span> chunk_graph <span class="op">=</span> <span class="kw">self</span><span class="op">.</span>generate_chunks()<span class="op">;</span></span>
<span id="cb1-46"><a href="#cb1-46" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-47"><a href="#cb1-47" aria-hidden="true" tabindex="-1"></a>    <span class="kw">self</span><span class="op">.</span>generate_chunk_filenames(<span class="op">&amp;</span><span class="kw">mut</span> chunk_graph)<span class="op">;</span></span>
<span id="cb1-48"><a href="#cb1-48" aria-hidden="true" tabindex="-1"></a>    <span class="pp">tracing::info!</span>(<span class="st">&quot;generate_chunk_filenames&quot;</span>)<span class="op">;</span></span>
<span id="cb1-49"><a href="#cb1-49" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-50"><a href="#cb1-50" aria-hidden="true" tabindex="-1"></a>    <span class="kw">self</span><span class="op">.</span>compute_cross_chunk_links(<span class="op">&amp;</span><span class="kw">mut</span> chunk_graph)<span class="op">;</span></span>
<span id="cb1-51"><a href="#cb1-51" aria-hidden="true" tabindex="-1"></a>    <span class="pp">tracing::info!</span>(<span class="st">&quot;compute_cross_chunk_links&quot;</span>)<span class="op">;</span></span>
<span id="cb1-52"><a href="#cb1-52" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-53"><a href="#cb1-53" aria-hidden="true" tabindex="-1"></a>    chunk_graph<span class="op">.</span>chunks<span class="op">.</span>iter_mut()<span class="op">.</span>par_bridge()<span class="op">.</span>for_each(<span class="op">|</span>chunk<span class="op">|</span> <span class="op">{</span></span>
<span id="cb1-54"><a href="#cb1-54" aria-hidden="true" tabindex="-1"></a>      chunk<span class="op">.</span>de_conflict(<span class="kw">self</span><span class="op">.</span>link_output)<span class="op">;</span></span>
<span id="cb1-55"><a href="#cb1-55" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span>)<span class="op">;</span></span>
<span id="cb1-56"><a href="#cb1-56" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-57"><a href="#cb1-57" aria-hidden="true" tabindex="-1"></a>    <span class="kw">self</span></span>
<span id="cb1-58"><a href="#cb1-58" aria-hidden="true" tabindex="-1"></a>      <span class="op">.</span>link_output</span>
<span id="cb1-59"><a href="#cb1-59" aria-hidden="true" tabindex="-1"></a>      <span class="op">.</span>ast_table</span>
<span id="cb1-60"><a href="#cb1-60" aria-hidden="true" tabindex="-1"></a>      <span class="op">.</span>iter_mut_enumerated()</span>
<span id="cb1-61"><a href="#cb1-61" aria-hidden="true" tabindex="-1"></a>      <span class="op">.</span>par_bridge()</span>
<span id="cb1-62"><a href="#cb1-62" aria-hidden="true" tabindex="-1"></a>      <span class="op">.</span>filter(<span class="op">|</span>(id<span class="op">,</span> _)<span class="op">|</span> <span class="kw">self</span><span class="op">.</span>link_output<span class="op">.</span>module_table<span class="op">.</span>normal_modules[<span class="op">*</span>id]<span class="op">.</span>is_included)</span>
<span id="cb1-63"><a href="#cb1-63" aria-hidden="true" tabindex="-1"></a>      <span class="op">.</span>for_each(<span class="op">|</span>(id<span class="op">,</span> ast)<span class="op">|</span> <span class="op">{</span></span>
<span id="cb1-64"><a href="#cb1-64" aria-hidden="true" tabindex="-1"></a>        <span class="kw">let</span> module <span class="op">=</span> <span class="op">&amp;</span><span class="kw">self</span><span class="op">.</span>link_output<span class="op">.</span>module_table<span class="op">.</span>normal_modules[id]<span class="op">;</span></span>
<span id="cb1-65"><a href="#cb1-65" aria-hidden="true" tabindex="-1"></a>        <span class="kw">let</span> chunk_id <span class="op">=</span> chunk_graph<span class="op">.</span>module_to_chunk[module<span class="op">.</span>id]<span class="op">.</span>unwrap()<span class="op">;</span></span>
<span id="cb1-66"><a href="#cb1-66" aria-hidden="true" tabindex="-1"></a>        <span class="kw">let</span> chunk <span class="op">=</span> <span class="op">&amp;</span>chunk_graph<span class="op">.</span>chunks[chunk_id]<span class="op">;</span></span>
<span id="cb1-67"><a href="#cb1-67" aria-hidden="true" tabindex="-1"></a>        <span class="kw">let</span> linking_info <span class="op">=</span> <span class="op">&amp;</span><span class="kw">self</span><span class="op">.</span>link_output<span class="op">.</span>metas[module<span class="op">.</span>id]<span class="op">;</span></span>
<span id="cb1-68"><a href="#cb1-68" aria-hidden="true" tabindex="-1"></a>        finalize_normal_module(</span>
<span id="cb1-69"><a href="#cb1-69" aria-hidden="true" tabindex="-1"></a>          module<span class="op">,</span></span>
<span id="cb1-70"><a href="#cb1-70" aria-hidden="true" tabindex="-1"></a>          FinalizerContext <span class="op">{</span></span>
<span id="cb1-71"><a href="#cb1-71" aria-hidden="true" tabindex="-1"></a>            canonical_names<span class="op">:</span> <span class="op">&amp;</span>chunk<span class="op">.</span>canonical_names<span class="op">,</span></span>
<span id="cb1-72"><a href="#cb1-72" aria-hidden="true" tabindex="-1"></a>            id<span class="op">:</span> module<span class="op">.</span>id<span class="op">,</span></span>
<span id="cb1-73"><a href="#cb1-73" aria-hidden="true" tabindex="-1"></a>            symbols<span class="op">:</span> <span class="op">&amp;</span><span class="kw">self</span><span class="op">.</span>link_output<span class="op">.</span>symbols<span class="op">,</span></span>
<span id="cb1-74"><a href="#cb1-74" aria-hidden="true" tabindex="-1"></a>            linking_info<span class="op">,</span></span>
<span id="cb1-75"><a href="#cb1-75" aria-hidden="true" tabindex="-1"></a>            module<span class="op">,</span></span>
<span id="cb1-76"><a href="#cb1-76" aria-hidden="true" tabindex="-1"></a>            modules<span class="op">:</span> <span class="op">&amp;</span><span class="kw">self</span><span class="op">.</span>link_output<span class="op">.</span>module_table<span class="op">.</span>normal_modules<span class="op">,</span></span>
<span id="cb1-77"><a href="#cb1-77" aria-hidden="true" tabindex="-1"></a>            linking_infos<span class="op">:</span> <span class="op">&amp;</span><span class="kw">self</span><span class="op">.</span>link_output<span class="op">.</span>metas<span class="op">,</span></span>
<span id="cb1-78"><a href="#cb1-78" aria-hidden="true" tabindex="-1"></a>            runtime<span class="op">:</span> <span class="op">&amp;</span><span class="kw">self</span><span class="op">.</span>link_output<span class="op">.</span>runtime<span class="op">,</span></span>
<span id="cb1-79"><a href="#cb1-79" aria-hidden="true" tabindex="-1"></a>            chunk_graph<span class="op">:</span> <span class="op">&amp;</span>chunk_graph<span class="op">,</span></span>
<span id="cb1-80"><a href="#cb1-80" aria-hidden="true" tabindex="-1"></a>          <span class="op">},</span></span>
<span id="cb1-81"><a href="#cb1-81" aria-hidden="true" tabindex="-1"></a>          ast<span class="op">,</span></span>
<span id="cb1-82"><a href="#cb1-82" aria-hidden="true" tabindex="-1"></a>        )<span class="op">;</span></span>
<span id="cb1-83"><a href="#cb1-83" aria-hidden="true" tabindex="-1"></a>      <span class="op">}</span>)<span class="op">;</span></span>
<span id="cb1-84"><a href="#cb1-84" aria-hidden="true" tabindex="-1"></a>    <span class="pp">tracing::info!</span>(<span class="st">&quot;finalizing modules&quot;</span>)<span class="op">;</span></span>
<span id="cb1-85"><a href="#cb1-85" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-86"><a href="#cb1-86" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> chunks <span class="op">=</span> block_on_spawn_all(chunk_graph<span class="op">.</span>chunks<span class="op">.</span>iter()<span class="op">.</span>map(<span class="op">|</span>c<span class="op">|</span> <span class="kw">async</span> <span class="op">{</span></span>
<span id="cb1-87"><a href="#cb1-87" aria-hidden="true" tabindex="-1"></a>      c<span class="op">.</span>render(<span class="kw">self</span><span class="op">.</span>input_options<span class="op">,</span> <span class="kw">self</span><span class="op">.</span>link_output<span class="op">,</span> <span class="op">&amp;</span>chunk_graph<span class="op">,</span> <span class="kw">self</span><span class="op">.</span>output_options)<span class="op">.</span><span class="kw">await</span></span>
<span id="cb1-88"><a href="#cb1-88" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span>))</span>
<span id="cb1-89"><a href="#cb1-89" aria-hidden="true" tabindex="-1"></a>    <span class="op">.</span>into_iter()</span>
<span id="cb1-90"><a href="#cb1-90" aria-hidden="true" tabindex="-1"></a>    <span class="op">.</span><span class="pp">collect::</span><span class="op">&lt;</span><span class="dt">Result</span><span class="op">&lt;</span><span class="dt">Vec</span><span class="op">&lt;</span>_<span class="op">&gt;,</span> _<span class="op">&gt;&gt;</span>()<span class="op">?;</span></span>
<span id="cb1-91"><a href="#cb1-91" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-92"><a href="#cb1-92" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> <span class="kw">mut</span> assets <span class="op">=</span> <span class="pp">vec!</span>[]<span class="op">;</span></span>
<span id="cb1-93"><a href="#cb1-93" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-94"><a href="#cb1-94" aria-hidden="true" tabindex="-1"></a>    render_chunks(<span class="kw">self</span><span class="op">.</span>plugin_driver<span class="op">,</span> chunks)<span class="op">.</span><span class="kw">await</span><span class="op">?.</span>into_iter()<span class="op">.</span>try_for_each(</span>
<span id="cb1-95"><a href="#cb1-95" aria-hidden="true" tabindex="-1"></a>      <span class="op">|</span>chunk<span class="op">|</span> <span class="op">-&gt;</span> <span class="dt">Result</span><span class="op">&lt;</span>()<span class="op">,</span> BuildError<span class="op">&gt;</span> <span class="op">{</span></span>
<span id="cb1-96"><a href="#cb1-96" aria-hidden="true" tabindex="-1"></a>        <span class="kw">let</span> ChunkRenderReturn <span class="op">{</span> <span class="kw">mut</span> map<span class="op">,</span> rendered_chunk<span class="op">,</span> <span class="kw">mut</span> code <span class="op">}</span> <span class="op">=</span> chunk<span class="op">;</span></span>
<span id="cb1-97"><a href="#cb1-97" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="kw">let</span> <span class="cn">Some</span>(map) <span class="op">=</span> map<span class="op">.</span>as_mut() <span class="op">{</span></span>
<span id="cb1-98"><a href="#cb1-98" aria-hidden="true" tabindex="-1"></a>          map<span class="op">.</span>set_file(rendered_chunk<span class="op">.</span>file_name<span class="op">.</span>as_str())<span class="op">;</span></span>
<span id="cb1-99"><a href="#cb1-99" aria-hidden="true" tabindex="-1"></a>          <span class="cf">match</span> <span class="kw">self</span><span class="op">.</span>output_options<span class="op">.</span>sourcemap <span class="op">{</span></span>
<span id="cb1-100"><a href="#cb1-100" aria-hidden="true" tabindex="-1"></a>            <span class="pp">SourceMapType::</span>File <span class="op">=&gt;</span> <span class="op">{</span></span>
<span id="cb1-101"><a href="#cb1-101" aria-hidden="true" tabindex="-1"></a>              <span class="kw">let</span> map_file_name <span class="op">=</span> <span class="pp">format!</span>(<span class="st">&quot;{}.map&quot;</span><span class="op">,</span> rendered_chunk<span class="op">.</span>file_name)<span class="op">;</span></span>
<span id="cb1-102"><a href="#cb1-102" aria-hidden="true" tabindex="-1"></a>              assets<span class="op">.</span>push(<span class="pp">Output::</span>Asset(<span class="pp">Arc::</span>new(OutputAsset <span class="op">{</span></span>
<span id="cb1-103"><a href="#cb1-103" aria-hidden="true" tabindex="-1"></a>                file_name<span class="op">:</span> map_file_name<span class="op">.</span>clone()<span class="op">,</span></span>
<span id="cb1-104"><a href="#cb1-104" aria-hidden="true" tabindex="-1"></a>                source<span class="op">:</span> map<span class="op">.</span>to_json_string()<span class="op">.</span>map_err(<span class="pp">BuildError::</span>sourcemap_error)<span class="op">?,</span></span>
<span id="cb1-105"><a href="#cb1-105" aria-hidden="true" tabindex="-1"></a>              <span class="op">}</span>)))<span class="op">;</span></span>
<span id="cb1-106"><a href="#cb1-106" aria-hidden="true" tabindex="-1"></a>              code<span class="op">.</span>push_str(<span class="op">&amp;</span><span class="pp">format!</span>(<span class="st">&quot;</span><span class="sc">\n</span><span class="st">//# sourceMappingURL={map_file_name}&quot;</span>))<span class="op">;</span></span>
<span id="cb1-107"><a href="#cb1-107" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span>
<span id="cb1-108"><a href="#cb1-108" aria-hidden="true" tabindex="-1"></a>            <span class="pp">SourceMapType::</span>Inline <span class="op">=&gt;</span> <span class="op">{</span></span>
<span id="cb1-109"><a href="#cb1-109" aria-hidden="true" tabindex="-1"></a>              <span class="kw">let</span> data_url <span class="op">=</span> map<span class="op">.</span>to_data_url()<span class="op">.</span>map_err(<span class="pp">BuildError::</span>sourcemap_error)<span class="op">?;</span></span>
<span id="cb1-110"><a href="#cb1-110" aria-hidden="true" tabindex="-1"></a>              code<span class="op">.</span>push_str(<span class="op">&amp;</span><span class="pp">format!</span>(<span class="st">&quot;</span><span class="sc">\n</span><span class="st">//# sourceMappingURL={data_url}&quot;</span>))<span class="op">;</span></span>
<span id="cb1-111"><a href="#cb1-111" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span>
<span id="cb1-112"><a href="#cb1-112" aria-hidden="true" tabindex="-1"></a>            <span class="pp">SourceMapType::</span>Hidden <span class="op">=&gt;</span> <span class="op">{}</span></span>
<span id="cb1-113"><a href="#cb1-113" aria-hidden="true" tabindex="-1"></a>          <span class="op">}</span></span>
<span id="cb1-114"><a href="#cb1-114" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb1-115"><a href="#cb1-115" aria-hidden="true" tabindex="-1"></a>        <span class="kw">let</span> sourcemap_file_name <span class="op">=</span> map<span class="op">.</span>as_ref()<span class="op">.</span>map(<span class="op">|</span>_<span class="op">|</span> <span class="pp">format!</span>(<span class="st">&quot;{}.map&quot;</span><span class="op">,</span> rendered_chunk<span class="op">.</span>file_name))<span class="op">;</span></span>
<span id="cb1-116"><a href="#cb1-116" aria-hidden="true" tabindex="-1"></a>        assets<span class="op">.</span>push(<span class="pp">Output::</span>Chunk(<span class="pp">Arc::</span>new(OutputChunk <span class="op">{</span></span>
<span id="cb1-117"><a href="#cb1-117" aria-hidden="true" tabindex="-1"></a>          file_name<span class="op">:</span> rendered_chunk<span class="op">.</span>file_name<span class="op">,</span></span>
<span id="cb1-118"><a href="#cb1-118" aria-hidden="true" tabindex="-1"></a>          code<span class="op">,</span></span>
<span id="cb1-119"><a href="#cb1-119" aria-hidden="true" tabindex="-1"></a>          is_entry<span class="op">:</span> rendered_chunk<span class="op">.</span>is_entry<span class="op">,</span></span>
<span id="cb1-120"><a href="#cb1-120" aria-hidden="true" tabindex="-1"></a>          is_dynamic_entry<span class="op">:</span> rendered_chunk<span class="op">.</span>is_dynamic_entry<span class="op">,</span></span>
<span id="cb1-121"><a href="#cb1-121" aria-hidden="true" tabindex="-1"></a>          facade_module_id<span class="op">:</span> rendered_chunk<span class="op">.</span>facade_module_id<span class="op">,</span></span>
<span id="cb1-122"><a href="#cb1-122" aria-hidden="true" tabindex="-1"></a>          modules<span class="op">:</span> rendered_chunk<span class="op">.</span>modules<span class="op">,</span></span>
<span id="cb1-123"><a href="#cb1-123" aria-hidden="true" tabindex="-1"></a>          exports<span class="op">:</span> rendered_chunk<span class="op">.</span>exports<span class="op">,</span></span>
<span id="cb1-124"><a href="#cb1-124" aria-hidden="true" tabindex="-1"></a>          module_ids<span class="op">:</span> rendered_chunk<span class="op">.</span>module_ids<span class="op">,</span></span>
<span id="cb1-125"><a href="#cb1-125" aria-hidden="true" tabindex="-1"></a>          map<span class="op">,</span></span>
<span id="cb1-126"><a href="#cb1-126" aria-hidden="true" tabindex="-1"></a>          sourcemap_file_name<span class="op">,</span></span>
<span id="cb1-127"><a href="#cb1-127" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span>)))<span class="op">;</span></span>
<span id="cb1-128"><a href="#cb1-128" aria-hidden="true" tabindex="-1"></a>        <span class="cn">Ok</span>(())</span>
<span id="cb1-129"><a href="#cb1-129" aria-hidden="true" tabindex="-1"></a>      <span class="op">},</span></span>
<span id="cb1-130"><a href="#cb1-130" aria-hidden="true" tabindex="-1"></a>    )<span class="op">?;</span></span>
<span id="cb1-131"><a href="#cb1-131" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-132"><a href="#cb1-132" aria-hidden="true" tabindex="-1"></a>    <span class="pp">tracing::info!</span>(<span class="st">&quot;rendered chunks&quot;</span>)<span class="op">;</span></span>
<span id="cb1-133"><a href="#cb1-133" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-134"><a href="#cb1-134" aria-hidden="true" tabindex="-1"></a>    <span class="cn">Ok</span>(assets)</span>
<span id="cb1-135"><a href="#cb1-135" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb1-136"><a href="#cb1-136" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-137"><a href="#cb1-137" aria-hidden="true" tabindex="-1"></a>  <span class="kw">fn</span> generate_chunk_filenames(<span class="op">&amp;</span><span class="kw">self</span><span class="op">,</span> chunk_graph<span class="op">:</span> <span class="op">&amp;</span><span class="kw">mut</span> ChunkGraph) <span class="op">{</span></span>
<span id="cb1-138"><a href="#cb1-138" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> <span class="kw">mut</span> used_chunk_names <span class="op">=</span> <span class="pp">FxHashSet::</span><span class="kw">default</span>()<span class="op">;</span></span>
<span id="cb1-139"><a href="#cb1-139" aria-hidden="true" tabindex="-1"></a>    chunk_graph<span class="op">.</span>chunks<span class="op">.</span>iter_mut()<span class="op">.</span>for_each(<span class="op">|</span>chunk<span class="op">|</span> <span class="op">{</span></span>
<span id="cb1-140"><a href="#cb1-140" aria-hidden="true" tabindex="-1"></a>      <span class="kw">let</span> runtime_id <span class="op">=</span> <span class="kw">self</span><span class="op">.</span>link_output<span class="op">.</span>runtime<span class="op">.</span>id()<span class="op">;</span></span>
<span id="cb1-141"><a href="#cb1-141" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-142"><a href="#cb1-142" aria-hidden="true" tabindex="-1"></a>      <span class="kw">let</span> file_name_tmp <span class="op">=</span> chunk<span class="op">.</span>file_name_template(<span class="kw">self</span><span class="op">.</span>output_options)<span class="op">;</span></span>
<span id="cb1-143"><a href="#cb1-143" aria-hidden="true" tabindex="-1"></a>      <span class="kw">let</span> chunk_name <span class="op">=</span></span>
<span id="cb1-144"><a href="#cb1-144" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> is_in_rust_test_mode() <span class="op">&amp;&amp;</span> chunk<span class="op">.</span>modules<span class="op">.</span>first()<span class="op">.</span>copied() <span class="op">==</span> <span class="cn">Some</span>(runtime_id) <span class="op">{</span></span>
<span id="cb1-145"><a href="#cb1-145" aria-hidden="true" tabindex="-1"></a>          <span class="st">&quot;$runtime$&quot;</span><span class="op">.</span>to_string()</span>
<span id="cb1-146"><a href="#cb1-146" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span> <span class="cf">else</span> <span class="op">{</span></span>
<span id="cb1-147"><a href="#cb1-147" aria-hidden="true" tabindex="-1"></a>          chunk<span class="op">.</span>name<span class="op">.</span>clone()<span class="op">.</span>unwrap_or_else(<span class="op">||</span> <span class="op">{</span></span>
<span id="cb1-148"><a href="#cb1-148" aria-hidden="true" tabindex="-1"></a>            <span class="kw">let</span> module_id <span class="op">=</span></span>
<span id="cb1-149"><a href="#cb1-149" aria-hidden="true" tabindex="-1"></a>              <span class="cf">if</span> <span class="kw">let</span> <span class="pp">ChunkKind::</span>EntryPoint <span class="op">{</span> module<span class="op">:</span> entry_module_id<span class="op">,</span> is_user_defined<span class="op">,</span> <span class="op">..</span> <span class="op">}</span> <span class="op">=</span></span>
<span id="cb1-150"><a href="#cb1-150" aria-hidden="true" tabindex="-1"></a>                <span class="op">&amp;</span>chunk<span class="op">.</span>kind</span>
<span id="cb1-151"><a href="#cb1-151" aria-hidden="true" tabindex="-1"></a>              <span class="op">{</span></span>
<span id="cb1-152"><a href="#cb1-152" aria-hidden="true" tabindex="-1"></a>                <span class="pp">debug_assert!</span>(</span>
<span id="cb1-153"><a href="#cb1-153" aria-hidden="true" tabindex="-1"></a>                  <span class="op">!*</span>is_user_defined<span class="op">,</span></span>
<span id="cb1-154"><a href="#cb1-154" aria-hidden="true" tabindex="-1"></a>                  <span class="st">&quot;User-defined entry point should always have a name&quot;</span></span>
<span id="cb1-155"><a href="#cb1-155" aria-hidden="true" tabindex="-1"></a>                )<span class="op">;</span></span>
<span id="cb1-156"><a href="#cb1-156" aria-hidden="true" tabindex="-1"></a>                <span class="op">*</span>entry_module_id</span>
<span id="cb1-157"><a href="#cb1-157" aria-hidden="true" tabindex="-1"></a>              <span class="op">}</span> <span class="cf">else</span> <span class="op">{</span></span>
<span id="cb1-158"><a href="#cb1-158" aria-hidden="true" tabindex="-1"></a>                <span class="co">// </span><span class="al">TODO</span><span class="co">: we currently use the first executed module to calculate the chunk name for common chunks</span></span>
<span id="cb1-159"><a href="#cb1-159" aria-hidden="true" tabindex="-1"></a>                <span class="co">// This is not perfect, should investigate more to find a better solution</span></span>
<span id="cb1-160"><a href="#cb1-160" aria-hidden="true" tabindex="-1"></a>                chunk<span class="op">.</span>modules<span class="op">.</span>first()<span class="op">.</span>copied()<span class="op">.</span>unwrap()</span>
<span id="cb1-161"><a href="#cb1-161" aria-hidden="true" tabindex="-1"></a>              <span class="op">};</span></span>
<span id="cb1-162"><a href="#cb1-162" aria-hidden="true" tabindex="-1"></a>            <span class="kw">let</span> module <span class="op">=</span> <span class="op">&amp;</span><span class="kw">self</span><span class="op">.</span>link_output<span class="op">.</span>module_table<span class="op">.</span>normal_modules[module_id]<span class="op">;</span></span>
<span id="cb1-163"><a href="#cb1-163" aria-hidden="true" tabindex="-1"></a>            module<span class="op">.</span>resource_id<span class="op">.</span>expect_file()<span class="op">.</span>unique(<span class="op">&amp;</span><span class="kw">self</span><span class="op">.</span>input_options<span class="op">.</span>cwd)</span>
<span id="cb1-164"><a href="#cb1-164" aria-hidden="true" tabindex="-1"></a>          <span class="op">}</span>)</span>
<span id="cb1-165"><a href="#cb1-165" aria-hidden="true" tabindex="-1"></a>        <span class="op">};</span></span>
<span id="cb1-166"><a href="#cb1-166" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-167"><a href="#cb1-167" aria-hidden="true" tabindex="-1"></a>      <span class="kw">let</span> <span class="kw">mut</span> chunk_name <span class="op">=</span> chunk_name<span class="op">;</span></span>
<span id="cb1-168"><a href="#cb1-168" aria-hidden="true" tabindex="-1"></a>      <span class="cf">while</span> used_chunk_names<span class="op">.</span>contains(<span class="op">&amp;</span>chunk_name) <span class="op">{</span></span>
<span id="cb1-169"><a href="#cb1-169" aria-hidden="true" tabindex="-1"></a>        chunk_name <span class="op">=</span> <span class="pp">format!</span>(<span class="st">&quot;{}-{}&quot;</span><span class="op">,</span> chunk_name<span class="op">,</span> used_chunk_names<span class="op">.</span>len())<span class="op">;</span></span>
<span id="cb1-170"><a href="#cb1-170" aria-hidden="true" tabindex="-1"></a>      <span class="op">}</span></span>
<span id="cb1-171"><a href="#cb1-171" aria-hidden="true" tabindex="-1"></a>      used_chunk_names<span class="op">.</span>insert(chunk_name<span class="op">.</span>clone())<span class="op">;</span></span>
<span id="cb1-172"><a href="#cb1-172" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-173"><a href="#cb1-173" aria-hidden="true" tabindex="-1"></a>      chunk<span class="op">.</span>file_name <span class="op">=</span></span>
<span id="cb1-174"><a href="#cb1-174" aria-hidden="true" tabindex="-1"></a>        <span class="cn">Some</span>(file_name_tmp<span class="op">.</span>render(<span class="op">&amp;</span>FileNameRenderOptions <span class="op">{</span> name<span class="op">:</span> <span class="cn">Some</span>(<span class="op">&amp;</span>chunk_name) <span class="op">}</span>))<span class="op">;</span></span>
<span id="cb1-175"><a href="#cb1-175" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span>)<span class="op">;</span></span>
<span id="cb1-176"><a href="#cb1-176" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb1-177"><a href="#cb1-177" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
</body>
</html>
