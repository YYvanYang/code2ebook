<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="" xml:lang="">
<head>
  <meta charset="utf-8" />
  <meta name="generator" content="pandoc" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
  <title>impl_visit_mut_for_finalizer</title>
  <style>
    html {
      color: #1a1a1a;
      background-color: #fdfdfd;
    }
    body {
      margin: 0 auto;
      max-width: 36em;
      padding-left: 50px;
      padding-right: 50px;
      padding-top: 50px;
      padding-bottom: 50px;
      hyphens: auto;
      overflow-wrap: break-word;
      text-rendering: optimizeLegibility;
      font-kerning: normal;
    }
    @media (max-width: 600px) {
      body {
        font-size: 0.9em;
        padding: 12px;
      }
      h1 {
        font-size: 1.8em;
      }
    }
    @media print {
      html {
        background-color: white;
      }
      body {
        background-color: transparent;
        color: black;
        font-size: 12pt;
      }
      p, h2, h3 {
        orphans: 3;
        widows: 3;
      }
      h2, h3, h4 {
        page-break-after: avoid;
      }
    }
    p {
      margin: 1em 0;
    }
    a {
      color: #1a1a1a;
    }
    a:visited {
      color: #1a1a1a;
    }
    img {
      max-width: 100%;
    }
    svg {
      height: auto;
      max-width: 100%;
    }
    h1, h2, h3, h4, h5, h6 {
      margin-top: 1.4em;
    }
    h5, h6 {
      font-size: 1em;
      font-style: italic;
    }
    h6 {
      font-weight: normal;
    }
    ol, ul {
      padding-left: 1.7em;
      margin-top: 1em;
    }
    li > ol, li > ul {
      margin-top: 0;
    }
    blockquote {
      margin: 1em 0 1em 1.7em;
      padding-left: 1em;
      border-left: 2px solid #e6e6e6;
      color: #606060;
    }
    code {
      font-family: Menlo, Monaco, Consolas, 'Lucida Console', monospace;
      font-size: 85%;
      margin: 0;
      hyphens: manual;
    }
    pre {
      margin: 1em 0;
      overflow: auto;
    }
    pre code {
      padding: 0;
      overflow: visible;
      overflow-wrap: normal;
    }
    .sourceCode {
     background-color: transparent;
     overflow: visible;
    }
    hr {
      background-color: #1a1a1a;
      border: none;
      height: 1px;
      margin: 1em 0;
    }
    table {
      margin: 1em 0;
      border-collapse: collapse;
      width: 100%;
      overflow-x: auto;
      display: block;
      font-variant-numeric: lining-nums tabular-nums;
    }
    table caption {
      margin-bottom: 0.75em;
    }
    tbody {
      margin-top: 0.5em;
      border-top: 1px solid #1a1a1a;
      border-bottom: 1px solid #1a1a1a;
    }
    th {
      border-top: 1px solid #1a1a1a;
      padding: 0.25em 0.5em 0.25em 0.5em;
    }
    td {
      padding: 0.125em 0.5em 0.25em 0.5em;
    }
    header {
      margin-bottom: 4em;
      text-align: center;
    }
    #TOC li {
      list-style: none;
    }
    #TOC ul {
      padding-left: 1.3em;
    }
    #TOC > ul {
      padding-left: 0;
    }
    #TOC a:not(:hover) {
      text-decoration: none;
    }
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    div.columns{display: flex; gap: min(4vw, 1.5em);}
    div.column{flex: auto; overflow-x: auto;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    /* The extra [class] is a hack that increases specificity enough to
       override a similar rule in reveal.js */
    ul.task-list[class]{list-style: none;}
    ul.task-list li input[type="checkbox"] {
      font-size: inherit;
      width: 0.8em;
      margin: 0 0.8em 0.2em -1.6em;
      vertical-align: middle;
    }
    .display.math{display: block; text-align: center; margin: 0.5rem auto;}
    /* CSS for syntax highlighting */
    pre > code.sourceCode { white-space: pre; position: relative; }
    pre > code.sourceCode > span { line-height: 1.25; }
    pre > code.sourceCode > span:empty { height: 1.2em; }
    .sourceCode { overflow: visible; }
    code.sourceCode > span { color: inherit; text-decoration: inherit; }
    div.sourceCode { margin: 1em 0; }
    pre.sourceCode { margin: 0; }
    @media screen {
    div.sourceCode { overflow: auto; }
    }
    @media print {
    pre > code.sourceCode { white-space: pre-wrap; }
    pre > code.sourceCode > span { display: inline-block; text-indent: -5em; padding-left: 5em; }
    }
    pre.numberSource code
      { counter-reset: source-line 0; }
    pre.numberSource code > span
      { position: relative; left: -4em; counter-increment: source-line; }
    pre.numberSource code > span > a:first-child::before
      { content: counter(source-line);
        position: relative; left: -1em; text-align: right; vertical-align: baseline;
        border: none; display: inline-block;
        -webkit-touch-callout: none; -webkit-user-select: none;
        -khtml-user-select: none; -moz-user-select: none;
        -ms-user-select: none; user-select: none;
        padding: 0 4px; width: 4em;
        color: #aaaaaa;
      }
    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }
    div.sourceCode
      {   }
    @media screen {
    pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }
    }
    code span.al { color: #ff0000; font-weight: bold; } /* Alert */
    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
    code span.at { color: #7d9029; } /* Attribute */
    code span.bn { color: #40a070; } /* BaseN */
    code span.bu { color: #008000; } /* BuiltIn */
    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
    code span.ch { color: #4070a0; } /* Char */
    code span.cn { color: #880000; } /* Constant */
    code span.co { color: #60a0b0; font-style: italic; } /* Comment */
    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
    code span.do { color: #ba2121; font-style: italic; } /* Documentation */
    code span.dt { color: #902000; } /* DataType */
    code span.dv { color: #40a070; } /* DecVal */
    code span.er { color: #ff0000; font-weight: bold; } /* Error */
    code span.ex { } /* Extension */
    code span.fl { color: #40a070; } /* Float */
    code span.fu { color: #06287e; } /* Function */
    code span.im { color: #008000; font-weight: bold; } /* Import */
    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
    code span.kw { color: #007020; font-weight: bold; } /* Keyword */
    code span.op { color: #666666; } /* Operator */
    code span.ot { color: #007020; } /* Other */
    code span.pp { color: #bc7a00; } /* Preprocessor */
    code span.sc { color: #4070a0; } /* SpecialChar */
    code span.ss { color: #bb6688; } /* SpecialString */
    code span.st { color: #4070a0; } /* String */
    code span.va { color: #19177c; } /* Variable */
    code span.vs { color: #4070a0; } /* VerbatimString */
    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
  </style>
</head>
<body>
<div class="sourceCode" id="cb1"><pre class="sourceCode rs"><code class="sourceCode rust"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="co">// cSpell:disable</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="kw">use</span> <span class="pp">oxc::</span><span class="op">{</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>  allocator<span class="op">,</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>  <span class="pp">ast::</span><span class="op">{</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>    <span class="pp">ast::</span><span class="op">{</span><span class="kw">self</span><span class="op">,</span> SimpleAssignmentTarget<span class="op">},</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>    <span class="pp">visit::walk_mut::</span>walk_expression_mut<span class="op">,</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>    VisitMut<span class="op">,</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>  <span class="op">},</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>  <span class="pp">span::</span><span class="op">{</span>Span<span class="op">,</span> SPAN<span class="op">},</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a><span class="kw">use</span> <span class="pp">rolldown_common::</span><span class="op">{</span>ExportsKind<span class="op">,</span> ModuleId<span class="op">,</span> SymbolRef<span class="op">,</span> WrapKind<span class="op">};</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a><span class="kw">use</span> <span class="pp">rolldown_oxc_utils::</span><span class="op">{</span>Dummy<span class="op">,</span> ExpressionExt<span class="op">,</span> IntoIn<span class="op">,</span> StatementExt<span class="op">,</span> TakeIn<span class="op">};</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a><span class="kw">use</span> <span class="kw">super</span><span class="pp">::</span>Finalizer<span class="op">;</span></span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a><span class="kw">impl</span><span class="op">&lt;</span><span class="ot">&#39;ast</span><span class="op">,</span> <span class="ot">&#39;me</span><span class="op">:</span> <span class="ot">&#39;ast</span><span class="op">&gt;</span> Finalizer<span class="op">&lt;</span><span class="ot">&#39;me</span><span class="op">,</span> <span class="ot">&#39;ast</span><span class="op">&gt;</span> <span class="op">{</span></span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a>  <span class="kw">fn</span> visit_top_level_statement_mut(<span class="op">&amp;</span><span class="kw">mut</span> <span class="kw">self</span><span class="op">,</span> stmt<span class="op">:</span> <span class="op">&amp;</span><span class="kw">mut</span> <span class="pp">ast::</span>Statement<span class="op">&lt;</span><span class="ot">&#39;ast</span><span class="op">&gt;</span>) <span class="op">{</span></span>
<span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a>    <span class="kw">self</span><span class="op">.</span>visit_statement(stmt)<span class="op">;</span></span>
<span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb1-22"><a href="#cb1-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-23"><a href="#cb1-23" aria-hidden="true" tabindex="-1"></a><span class="kw">impl</span><span class="op">&lt;</span><span class="ot">&#39;ast</span><span class="op">,</span> <span class="ot">&#39;me</span><span class="op">:</span> <span class="ot">&#39;ast</span><span class="op">&gt;</span> VisitMut<span class="op">&lt;</span><span class="ot">&#39;ast</span><span class="op">&gt;</span> <span class="cf">for</span> Finalizer<span class="op">&lt;</span><span class="ot">&#39;me</span><span class="op">,</span> <span class="ot">&#39;ast</span><span class="op">&gt;</span> <span class="op">{</span></span>
<span id="cb1-24"><a href="#cb1-24" aria-hidden="true" tabindex="-1"></a>  <span class="at">#[</span>allow<span class="at">(</span><span class="pp">clippy::</span>too_many_lines<span class="op">,</span> <span class="pp">clippy::</span>match_same_arms<span class="at">)]</span></span>
<span id="cb1-25"><a href="#cb1-25" aria-hidden="true" tabindex="-1"></a>  <span class="kw">fn</span> visit_program(<span class="op">&amp;</span><span class="kw">mut</span> <span class="kw">self</span><span class="op">,</span> program<span class="op">:</span> <span class="op">&amp;</span><span class="kw">mut</span> <span class="pp">ast::</span>Program<span class="op">&lt;</span><span class="ot">&#39;ast</span><span class="op">&gt;</span>) <span class="op">{</span></span>
<span id="cb1-26"><a href="#cb1-26" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> old_body <span class="op">=</span> program<span class="op">.</span>body<span class="op">.</span>take_in(<span class="kw">self</span><span class="op">.</span>alloc)<span class="op">;</span></span>
<span id="cb1-27"><a href="#cb1-27" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> is_namespace_referenced <span class="op">=</span> <span class="pp">matches!</span>(<span class="kw">self</span><span class="op">.</span>ctx<span class="op">.</span>module<span class="op">.</span>exports_kind<span class="op">,</span> <span class="pp">ExportsKind::</span>Esm)</span>
<span id="cb1-28"><a href="#cb1-28" aria-hidden="true" tabindex="-1"></a>      <span class="op">&amp;&amp;</span> <span class="kw">self</span><span class="op">.</span>ctx<span class="op">.</span>module<span class="op">.</span>stmt_infos[<span class="dv">0</span>]<span class="op">.</span>is_included<span class="op">;</span></span>
<span id="cb1-29"><a href="#cb1-29" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-30"><a href="#cb1-30" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> is_namespace_referenced <span class="op">{</span></span>
<span id="cb1-31"><a href="#cb1-31" aria-hidden="true" tabindex="-1"></a>      program<span class="op">.</span>body<span class="op">.</span>extend(<span class="kw">self</span><span class="op">.</span>generate_namespace_variable_declaration())<span class="op">;</span></span>
<span id="cb1-32"><a href="#cb1-32" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb1-33"><a href="#cb1-33" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-34"><a href="#cb1-34" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> <span class="kw">mut</span> stmt_infos <span class="op">=</span> <span class="kw">self</span><span class="op">.</span>ctx<span class="op">.</span>module<span class="op">.</span>stmt_infos<span class="op">.</span>iter()<span class="op">;</span></span>
<span id="cb1-35"><a href="#cb1-35" aria-hidden="true" tabindex="-1"></a>    stmt_infos<span class="op">.</span>next()<span class="op">;</span></span>
<span id="cb1-36"><a href="#cb1-36" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-37"><a href="#cb1-37" aria-hidden="true" tabindex="-1"></a>    old_body<span class="op">.</span>into_iter()<span class="op">.</span>enumerate()<span class="op">.</span>zip(stmt_infos)<span class="op">.</span>for_each(</span>
<span id="cb1-38"><a href="#cb1-38" aria-hidden="true" tabindex="-1"></a>      <span class="op">|</span>((_top_stmt_idx<span class="op">,</span> <span class="kw">mut</span> top_stmt)<span class="op">,</span> stmt_info)<span class="op">|</span> <span class="op">{</span></span>
<span id="cb1-39"><a href="#cb1-39" aria-hidden="true" tabindex="-1"></a>        <span class="pp">debug_assert!</span>(<span class="pp">matches!</span>(stmt_info<span class="op">.</span>stmt_idx<span class="op">,</span> <span class="cn">Some</span>(_top_stmt_idx)))<span class="op">;</span></span>
<span id="cb1-40"><a href="#cb1-40" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">!</span>stmt_info<span class="op">.</span>is_included <span class="op">{</span></span>
<span id="cb1-41"><a href="#cb1-41" aria-hidden="true" tabindex="-1"></a>          <span class="cf">return</span><span class="op">;</span></span>
<span id="cb1-42"><a href="#cb1-42" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb1-43"><a href="#cb1-43" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-44"><a href="#cb1-44" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="kw">let</span> <span class="cn">Some</span>(import_decl) <span class="op">=</span> top_stmt<span class="op">.</span>as_import_declaration() <span class="op">{</span></span>
<span id="cb1-45"><a href="#cb1-45" aria-hidden="true" tabindex="-1"></a>          <span class="kw">let</span> rec_id <span class="op">=</span> <span class="kw">self</span><span class="op">.</span>ctx<span class="op">.</span>module<span class="op">.</span>imports[<span class="op">&amp;</span>import_decl<span class="op">.</span>span]<span class="op">;</span></span>
<span id="cb1-46"><a href="#cb1-46" aria-hidden="true" tabindex="-1"></a>          <span class="cf">if</span> <span class="kw">self</span><span class="op">.</span>should_remove_import_export_stmt(<span class="op">&amp;</span><span class="kw">mut</span> top_stmt<span class="op">,</span> rec_id) <span class="op">{</span></span>
<span id="cb1-47"><a href="#cb1-47" aria-hidden="true" tabindex="-1"></a>            <span class="cf">return</span><span class="op">;</span></span>
<span id="cb1-48"><a href="#cb1-48" aria-hidden="true" tabindex="-1"></a>          <span class="op">}</span></span>
<span id="cb1-49"><a href="#cb1-49" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span> <span class="cf">else</span> <span class="cf">if</span> <span class="kw">let</span> <span class="cn">Some</span>(export_all_decl) <span class="op">=</span> top_stmt<span class="op">.</span>as_export_all_declaration() <span class="op">{</span></span>
<span id="cb1-50"><a href="#cb1-50" aria-hidden="true" tabindex="-1"></a>          <span class="kw">let</span> rec_id <span class="op">=</span> <span class="kw">self</span><span class="op">.</span>ctx<span class="op">.</span>module<span class="op">.</span>imports[<span class="op">&amp;</span>export_all_decl<span class="op">.</span>span]<span class="op">;</span></span>
<span id="cb1-51"><a href="#cb1-51" aria-hidden="true" tabindex="-1"></a>          <span class="co">// &quot;export * as ns from &#39;path&#39;&quot;</span></span>
<span id="cb1-52"><a href="#cb1-52" aria-hidden="true" tabindex="-1"></a>          <span class="cf">if</span> <span class="kw">let</span> <span class="cn">Some</span>(_alias) <span class="op">=</span> <span class="op">&amp;</span>export_all_decl<span class="op">.</span>exported <span class="op">{</span></span>
<span id="cb1-53"><a href="#cb1-53" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span> <span class="kw">self</span><span class="op">.</span>should_remove_import_export_stmt(<span class="op">&amp;</span><span class="kw">mut</span> top_stmt<span class="op">,</span> rec_id) <span class="op">{</span></span>
<span id="cb1-54"><a href="#cb1-54" aria-hidden="true" tabindex="-1"></a>              <span class="cf">return</span><span class="op">;</span></span>
<span id="cb1-55"><a href="#cb1-55" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span>
<span id="cb1-56"><a href="#cb1-56" aria-hidden="true" tabindex="-1"></a>          <span class="op">}</span> <span class="cf">else</span> <span class="op">{</span></span>
<span id="cb1-57"><a href="#cb1-57" aria-hidden="true" tabindex="-1"></a>            <span class="co">// &quot;export * from &#39;path&#39;&quot;</span></span>
<span id="cb1-58"><a href="#cb1-58" aria-hidden="true" tabindex="-1"></a>            <span class="kw">let</span> rec <span class="op">=</span> <span class="op">&amp;</span><span class="kw">self</span><span class="op">.</span>ctx<span class="op">.</span>module<span class="op">.</span>import_records[rec_id]<span class="op">;</span></span>
<span id="cb1-59"><a href="#cb1-59" aria-hidden="true" tabindex="-1"></a>            <span class="kw">let</span> <span class="pp">ModuleId::</span>Normal(importee_id) <span class="op">=</span> rec<span class="op">.</span>resolved_module <span class="cf">else</span> <span class="op">{</span></span>
<span id="cb1-60"><a href="#cb1-60" aria-hidden="true" tabindex="-1"></a>              <span class="co">// </span><span class="al">TODO</span><span class="co">: handle re-exporting all from external module</span></span>
<span id="cb1-61"><a href="#cb1-61" aria-hidden="true" tabindex="-1"></a>              <span class="cf">return</span><span class="op">;</span></span>
<span id="cb1-62"><a href="#cb1-62" aria-hidden="true" tabindex="-1"></a>            <span class="op">};</span></span>
<span id="cb1-63"><a href="#cb1-63" aria-hidden="true" tabindex="-1"></a>            <span class="kw">let</span> importee_linking_info <span class="op">=</span> <span class="op">&amp;</span><span class="kw">self</span><span class="op">.</span>ctx<span class="op">.</span>linking_infos[importee_id]<span class="op">;</span></span>
<span id="cb1-64"><a href="#cb1-64" aria-hidden="true" tabindex="-1"></a>            <span class="kw">let</span> importee <span class="op">=</span> <span class="op">&amp;</span><span class="kw">self</span><span class="op">.</span>ctx<span class="op">.</span>modules[importee_id]<span class="op">;</span></span>
<span id="cb1-65"><a href="#cb1-65" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span> <span class="pp">matches!</span>(importee_linking_info<span class="op">.</span>wrap_kind<span class="op">,</span> <span class="pp">WrapKind::</span>Esm) <span class="op">{</span></span>
<span id="cb1-66"><a href="#cb1-66" aria-hidden="true" tabindex="-1"></a>              <span class="kw">let</span> wrapper_ref_name <span class="op">=</span></span>
<span id="cb1-67"><a href="#cb1-67" aria-hidden="true" tabindex="-1"></a>                <span class="kw">self</span><span class="op">.</span>canonical_name_for(importee_linking_info<span class="op">.</span>wrapper_ref<span class="op">.</span>unwrap())<span class="op">;</span></span>
<span id="cb1-68"><a href="#cb1-68" aria-hidden="true" tabindex="-1"></a>              program<span class="op">.</span>body<span class="op">.</span>push(<span class="kw">self</span><span class="op">.</span>snippet<span class="op">.</span>call_expr_stmt(wrapper_ref_name))<span class="op">;</span></span>
<span id="cb1-69"><a href="#cb1-69" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span>
<span id="cb1-70"><a href="#cb1-70" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-71"><a href="#cb1-71" aria-hidden="true" tabindex="-1"></a>            <span class="cf">match</span> importee<span class="op">.</span>exports_kind <span class="op">{</span></span>
<span id="cb1-72"><a href="#cb1-72" aria-hidden="true" tabindex="-1"></a>              <span class="pp">ExportsKind::</span>Esm <span class="op">=&gt;</span> <span class="op">{</span></span>
<span id="cb1-73"><a href="#cb1-73" aria-hidden="true" tabindex="-1"></a>                <span class="cf">if</span> importee_linking_info<span class="op">.</span>has_dynamic_exports <span class="op">{</span></span>
<span id="cb1-74"><a href="#cb1-74" aria-hidden="true" tabindex="-1"></a>                  <span class="kw">let</span> re_export_fn_name <span class="op">=</span> <span class="kw">self</span><span class="op">.</span>canonical_name_for_runtime(<span class="st">&quot;__reExport&quot;</span>)<span class="op">;</span></span>
<span id="cb1-75"><a href="#cb1-75" aria-hidden="true" tabindex="-1"></a>                  <span class="kw">let</span> importer_namespace_name <span class="op">=</span></span>
<span id="cb1-76"><a href="#cb1-76" aria-hidden="true" tabindex="-1"></a>                    <span class="kw">self</span><span class="op">.</span>canonical_name_for(<span class="kw">self</span><span class="op">.</span>ctx<span class="op">.</span>module<span class="op">.</span>namespace_symbol)<span class="op">;</span></span>
<span id="cb1-77"><a href="#cb1-77" aria-hidden="true" tabindex="-1"></a>                  <span class="co">// __reExport(exports, otherExports)</span></span>
<span id="cb1-78"><a href="#cb1-78" aria-hidden="true" tabindex="-1"></a>                  <span class="kw">let</span> importee_namespace_name <span class="op">=</span> <span class="kw">self</span><span class="op">.</span>canonical_name_for(importee<span class="op">.</span>namespace_symbol)<span class="op">;</span></span>
<span id="cb1-79"><a href="#cb1-79" aria-hidden="true" tabindex="-1"></a>                  program<span class="op">.</span>body<span class="op">.</span>push(</span>
<span id="cb1-80"><a href="#cb1-80" aria-hidden="true" tabindex="-1"></a>                    <span class="kw">self</span></span>
<span id="cb1-81"><a href="#cb1-81" aria-hidden="true" tabindex="-1"></a>                      <span class="op">.</span>snippet</span>
<span id="cb1-82"><a href="#cb1-82" aria-hidden="true" tabindex="-1"></a>                      <span class="op">.</span>call_expr_with_2arg_expr(</span>
<span id="cb1-83"><a href="#cb1-83" aria-hidden="true" tabindex="-1"></a>                        re_export_fn_name<span class="op">,</span></span>
<span id="cb1-84"><a href="#cb1-84" aria-hidden="true" tabindex="-1"></a>                        importer_namespace_name<span class="op">,</span></span>
<span id="cb1-85"><a href="#cb1-85" aria-hidden="true" tabindex="-1"></a>                        importee_namespace_name<span class="op">,</span></span>
<span id="cb1-86"><a href="#cb1-86" aria-hidden="true" tabindex="-1"></a>                      )</span>
<span id="cb1-87"><a href="#cb1-87" aria-hidden="true" tabindex="-1"></a>                      <span class="op">.</span>into_in(<span class="kw">self</span><span class="op">.</span>alloc)<span class="op">,</span></span>
<span id="cb1-88"><a href="#cb1-88" aria-hidden="true" tabindex="-1"></a>                  )<span class="op">;</span></span>
<span id="cb1-89"><a href="#cb1-89" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span></span>
<span id="cb1-90"><a href="#cb1-90" aria-hidden="true" tabindex="-1"></a>              <span class="op">}</span></span>
<span id="cb1-91"><a href="#cb1-91" aria-hidden="true" tabindex="-1"></a>              <span class="pp">ExportsKind::</span>CommonJs <span class="op">=&gt;</span> <span class="op">{</span></span>
<span id="cb1-92"><a href="#cb1-92" aria-hidden="true" tabindex="-1"></a>                <span class="kw">let</span> re_export_fn_name <span class="op">=</span> <span class="kw">self</span><span class="op">.</span>canonical_name_for_runtime(<span class="st">&quot;__reExport&quot;</span>)<span class="op">;</span></span>
<span id="cb1-93"><a href="#cb1-93" aria-hidden="true" tabindex="-1"></a>                <span class="kw">let</span> importer_namespace_name <span class="op">=</span></span>
<span id="cb1-94"><a href="#cb1-94" aria-hidden="true" tabindex="-1"></a>                  <span class="kw">self</span><span class="op">.</span>canonical_name_for(<span class="kw">self</span><span class="op">.</span>ctx<span class="op">.</span>module<span class="op">.</span>namespace_symbol)<span class="op">;</span></span>
<span id="cb1-95"><a href="#cb1-95" aria-hidden="true" tabindex="-1"></a>                <span class="co">// __reExport(exports, __toESM(require_xxxx()))</span></span>
<span id="cb1-96"><a href="#cb1-96" aria-hidden="true" tabindex="-1"></a>                <span class="kw">let</span> to_esm_fn_name <span class="op">=</span> <span class="kw">self</span><span class="op">.</span>canonical_name_for_runtime(<span class="st">&quot;__toESM&quot;</span>)<span class="op">;</span></span>
<span id="cb1-97"><a href="#cb1-97" aria-hidden="true" tabindex="-1"></a>                <span class="kw">let</span> importee_wrapper_ref_name <span class="op">=</span></span>
<span id="cb1-98"><a href="#cb1-98" aria-hidden="true" tabindex="-1"></a>                  <span class="kw">self</span><span class="op">.</span>canonical_name_for(importee_linking_info<span class="op">.</span>wrapper_ref<span class="op">.</span>unwrap())<span class="op">;</span></span>
<span id="cb1-99"><a href="#cb1-99" aria-hidden="true" tabindex="-1"></a>                program<span class="op">.</span>body<span class="op">.</span>push(</span>
<span id="cb1-100"><a href="#cb1-100" aria-hidden="true" tabindex="-1"></a>                  <span class="kw">self</span></span>
<span id="cb1-101"><a href="#cb1-101" aria-hidden="true" tabindex="-1"></a>                    <span class="op">.</span>snippet</span>
<span id="cb1-102"><a href="#cb1-102" aria-hidden="true" tabindex="-1"></a>                    <span class="op">.</span>call_expr_with_2arg_expr_expr(</span>
<span id="cb1-103"><a href="#cb1-103" aria-hidden="true" tabindex="-1"></a>                      re_export_fn_name<span class="op">,</span></span>
<span id="cb1-104"><a href="#cb1-104" aria-hidden="true" tabindex="-1"></a>                      <span class="kw">self</span><span class="op">.</span>snippet<span class="op">.</span>id_ref_expr(importer_namespace_name<span class="op">,</span> SPAN)<span class="op">,</span></span>
<span id="cb1-105"><a href="#cb1-105" aria-hidden="true" tabindex="-1"></a>                      <span class="kw">self</span><span class="op">.</span>snippet<span class="op">.</span>call_expr_with_arg_expr_expr(</span>
<span id="cb1-106"><a href="#cb1-106" aria-hidden="true" tabindex="-1"></a>                        to_esm_fn_name<span class="op">,</span></span>
<span id="cb1-107"><a href="#cb1-107" aria-hidden="true" tabindex="-1"></a>                        <span class="kw">self</span><span class="op">.</span>snippet<span class="op">.</span>call_expr_expr(importee_wrapper_ref_name)<span class="op">,</span></span>
<span id="cb1-108"><a href="#cb1-108" aria-hidden="true" tabindex="-1"></a>                      )<span class="op">,</span></span>
<span id="cb1-109"><a href="#cb1-109" aria-hidden="true" tabindex="-1"></a>                    )</span>
<span id="cb1-110"><a href="#cb1-110" aria-hidden="true" tabindex="-1"></a>                    <span class="op">.</span>into_in(<span class="kw">self</span><span class="op">.</span>alloc)<span class="op">,</span></span>
<span id="cb1-111"><a href="#cb1-111" aria-hidden="true" tabindex="-1"></a>                )<span class="op">;</span></span>
<span id="cb1-112"><a href="#cb1-112" aria-hidden="true" tabindex="-1"></a>              <span class="op">}</span></span>
<span id="cb1-113"><a href="#cb1-113" aria-hidden="true" tabindex="-1"></a>              <span class="pp">ExportsKind::</span><span class="cn">None</span> <span class="op">=&gt;</span> <span class="op">{}</span></span>
<span id="cb1-114"><a href="#cb1-114" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span>
<span id="cb1-115"><a href="#cb1-115" aria-hidden="true" tabindex="-1"></a>            <span class="cf">return</span><span class="op">;</span></span>
<span id="cb1-116"><a href="#cb1-116" aria-hidden="true" tabindex="-1"></a>          <span class="op">}</span></span>
<span id="cb1-117"><a href="#cb1-117" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span> <span class="cf">else</span> <span class="cf">if</span> <span class="kw">let</span> <span class="cn">Some</span>(default_decl) <span class="op">=</span> top_stmt<span class="op">.</span>as_export_default_declaration_mut() <span class="op">{</span></span>
<span id="cb1-118"><a href="#cb1-118" aria-hidden="true" tabindex="-1"></a>          <span class="cf">match</span> <span class="op">&amp;</span><span class="kw">mut</span> default_decl<span class="op">.</span>declaration <span class="op">{</span></span>
<span id="cb1-119"><a href="#cb1-119" aria-hidden="true" tabindex="-1"></a>            <span class="pp">ast::ExportDefaultDeclarationKind::</span>Expression(expr) <span class="op">=&gt;</span> <span class="op">{</span></span>
<span id="cb1-120"><a href="#cb1-120" aria-hidden="true" tabindex="-1"></a>              <span class="co">// &quot;export default foo;&quot; =&gt; &quot;var default = foo;&quot;</span></span>
<span id="cb1-121"><a href="#cb1-121" aria-hidden="true" tabindex="-1"></a>              <span class="kw">let</span> canonical_name_for_default_export_ref <span class="op">=</span></span>
<span id="cb1-122"><a href="#cb1-122" aria-hidden="true" tabindex="-1"></a>                <span class="kw">self</span><span class="op">.</span>canonical_name_for(<span class="kw">self</span><span class="op">.</span>ctx<span class="op">.</span>module<span class="op">.</span>default_export_ref)<span class="op">;</span></span>
<span id="cb1-123"><a href="#cb1-123" aria-hidden="true" tabindex="-1"></a>              top_stmt <span class="op">=</span> <span class="kw">self</span></span>
<span id="cb1-124"><a href="#cb1-124" aria-hidden="true" tabindex="-1"></a>                <span class="op">.</span>snippet</span>
<span id="cb1-125"><a href="#cb1-125" aria-hidden="true" tabindex="-1"></a>                <span class="op">.</span>var_decl_stmt(canonical_name_for_default_export_ref<span class="op">,</span> expr<span class="op">.</span>take_in(<span class="kw">self</span><span class="op">.</span>alloc))<span class="op">;</span></span>
<span id="cb1-126"><a href="#cb1-126" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span>
<span id="cb1-127"><a href="#cb1-127" aria-hidden="true" tabindex="-1"></a>            <span class="pp">ast::ExportDefaultDeclarationKind::</span>FunctionDeclaration(func) <span class="op">=&gt;</span> <span class="op">{</span></span>
<span id="cb1-128"><a href="#cb1-128" aria-hidden="true" tabindex="-1"></a>              <span class="co">// &quot;export default function() {}&quot; =&gt; &quot;function default() {}&quot;</span></span>
<span id="cb1-129"><a href="#cb1-129" aria-hidden="true" tabindex="-1"></a>              <span class="co">// &quot;export default function foo() {}&quot; =&gt; &quot;function foo() {}&quot;</span></span>
<span id="cb1-130"><a href="#cb1-130" aria-hidden="true" tabindex="-1"></a>              <span class="cf">if</span> func<span class="op">.</span>id<span class="op">.</span>is_none() <span class="op">{</span></span>
<span id="cb1-131"><a href="#cb1-131" aria-hidden="true" tabindex="-1"></a>                <span class="kw">let</span> canonical_name_for_default_export_ref <span class="op">=</span></span>
<span id="cb1-132"><a href="#cb1-132" aria-hidden="true" tabindex="-1"></a>                  <span class="kw">self</span><span class="op">.</span>canonical_name_for(<span class="kw">self</span><span class="op">.</span>ctx<span class="op">.</span>module<span class="op">.</span>default_export_ref)<span class="op">;</span></span>
<span id="cb1-133"><a href="#cb1-133" aria-hidden="true" tabindex="-1"></a>                func<span class="op">.</span>id <span class="op">=</span> <span class="cn">Some</span>(<span class="kw">self</span><span class="op">.</span>snippet<span class="op">.</span>id(canonical_name_for_default_export_ref<span class="op">,</span> SPAN))<span class="op">;</span></span>
<span id="cb1-134"><a href="#cb1-134" aria-hidden="true" tabindex="-1"></a>              <span class="op">}</span></span>
<span id="cb1-135"><a href="#cb1-135" aria-hidden="true" tabindex="-1"></a>              top_stmt <span class="op">=</span> <span class="pp">ast::Statement::</span>Declaration(<span class="pp">ast::Declaration::</span>FunctionDeclaration(</span>
<span id="cb1-136"><a href="#cb1-136" aria-hidden="true" tabindex="-1"></a>                func<span class="op">.</span>take_in(<span class="kw">self</span><span class="op">.</span>alloc)<span class="op">,</span></span>
<span id="cb1-137"><a href="#cb1-137" aria-hidden="true" tabindex="-1"></a>              ))<span class="op">;</span></span>
<span id="cb1-138"><a href="#cb1-138" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span>
<span id="cb1-139"><a href="#cb1-139" aria-hidden="true" tabindex="-1"></a>            <span class="pp">ast::ExportDefaultDeclarationKind::</span>ClassDeclaration(class) <span class="op">=&gt;</span> <span class="op">{</span></span>
<span id="cb1-140"><a href="#cb1-140" aria-hidden="true" tabindex="-1"></a>              <span class="co">// &quot;export default class {}&quot; =&gt; &quot;class default {}&quot;</span></span>
<span id="cb1-141"><a href="#cb1-141" aria-hidden="true" tabindex="-1"></a>              <span class="co">// &quot;export default class Foo {}&quot; =&gt; &quot;class Foo {}&quot;</span></span>
<span id="cb1-142"><a href="#cb1-142" aria-hidden="true" tabindex="-1"></a>              <span class="cf">if</span> class<span class="op">.</span>id<span class="op">.</span>is_none() <span class="op">{</span></span>
<span id="cb1-143"><a href="#cb1-143" aria-hidden="true" tabindex="-1"></a>                <span class="kw">let</span> canonical_name_for_default_export_ref <span class="op">=</span></span>
<span id="cb1-144"><a href="#cb1-144" aria-hidden="true" tabindex="-1"></a>                  <span class="kw">self</span><span class="op">.</span>canonical_name_for(<span class="kw">self</span><span class="op">.</span>ctx<span class="op">.</span>module<span class="op">.</span>default_export_ref)<span class="op">;</span></span>
<span id="cb1-145"><a href="#cb1-145" aria-hidden="true" tabindex="-1"></a>                class<span class="op">.</span>id <span class="op">=</span> <span class="cn">Some</span>(<span class="kw">self</span><span class="op">.</span>snippet<span class="op">.</span>id(canonical_name_for_default_export_ref<span class="op">,</span> SPAN))<span class="op">;</span></span>
<span id="cb1-146"><a href="#cb1-146" aria-hidden="true" tabindex="-1"></a>              <span class="op">}</span></span>
<span id="cb1-147"><a href="#cb1-147" aria-hidden="true" tabindex="-1"></a>              top_stmt <span class="op">=</span> <span class="pp">ast::Statement::</span>Declaration(<span class="pp">ast::Declaration::</span>ClassDeclaration(</span>
<span id="cb1-148"><a href="#cb1-148" aria-hidden="true" tabindex="-1"></a>                class<span class="op">.</span>take_in(<span class="kw">self</span><span class="op">.</span>alloc)<span class="op">,</span></span>
<span id="cb1-149"><a href="#cb1-149" aria-hidden="true" tabindex="-1"></a>              ))<span class="op">;</span></span>
<span id="cb1-150"><a href="#cb1-150" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span>
<span id="cb1-151"><a href="#cb1-151" aria-hidden="true" tabindex="-1"></a>            _ <span class="op">=&gt;</span> <span class="op">{}</span></span>
<span id="cb1-152"><a href="#cb1-152" aria-hidden="true" tabindex="-1"></a>          <span class="op">}</span></span>
<span id="cb1-153"><a href="#cb1-153" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span> <span class="cf">else</span> <span class="cf">if</span> <span class="kw">let</span> <span class="cn">Some</span>(named_decl) <span class="op">=</span> top_stmt<span class="op">.</span>as_export_named_declaration_mut() <span class="op">{</span></span>
<span id="cb1-154"><a href="#cb1-154" aria-hidden="true" tabindex="-1"></a>          <span class="cf">if</span> named_decl<span class="op">.</span>source<span class="op">.</span>is_none() <span class="op">{</span></span>
<span id="cb1-155"><a href="#cb1-155" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span> <span class="kw">let</span> <span class="cn">Some</span>(decl) <span class="op">=</span> <span class="op">&amp;</span><span class="kw">mut</span> named_decl<span class="op">.</span>declaration <span class="op">{</span></span>
<span id="cb1-156"><a href="#cb1-156" aria-hidden="true" tabindex="-1"></a>              <span class="co">// `export var foo = 1` =&gt; `var foo = 1`</span></span>
<span id="cb1-157"><a href="#cb1-157" aria-hidden="true" tabindex="-1"></a>              <span class="co">// `export function foo() {}` =&gt; `function foo() {}`</span></span>
<span id="cb1-158"><a href="#cb1-158" aria-hidden="true" tabindex="-1"></a>              <span class="co">// `export class Foo {}` =&gt; `class Foo {}`</span></span>
<span id="cb1-159"><a href="#cb1-159" aria-hidden="true" tabindex="-1"></a>              top_stmt <span class="op">=</span> <span class="pp">ast::Statement::</span>Declaration(decl<span class="op">.</span>take_in(<span class="kw">self</span><span class="op">.</span>alloc))<span class="op">;</span></span>
<span id="cb1-160"><a href="#cb1-160" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span> <span class="cf">else</span> <span class="op">{</span></span>
<span id="cb1-161"><a href="#cb1-161" aria-hidden="true" tabindex="-1"></a>              <span class="co">// `export { foo }`</span></span>
<span id="cb1-162"><a href="#cb1-162" aria-hidden="true" tabindex="-1"></a>              <span class="co">// Remove this statement by ignoring it</span></span>
<span id="cb1-163"><a href="#cb1-163" aria-hidden="true" tabindex="-1"></a>              <span class="cf">return</span><span class="op">;</span></span>
<span id="cb1-164"><a href="#cb1-164" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span>
<span id="cb1-165"><a href="#cb1-165" aria-hidden="true" tabindex="-1"></a>          <span class="op">}</span> <span class="cf">else</span> <span class="op">{</span></span>
<span id="cb1-166"><a href="#cb1-166" aria-hidden="true" tabindex="-1"></a>            <span class="co">// `export { foo } from &#39;path&#39;`</span></span>
<span id="cb1-167"><a href="#cb1-167" aria-hidden="true" tabindex="-1"></a>            <span class="kw">let</span> rec_id <span class="op">=</span> <span class="kw">self</span><span class="op">.</span>ctx<span class="op">.</span>module<span class="op">.</span>imports[<span class="op">&amp;</span>named_decl<span class="op">.</span>span]<span class="op">;</span></span>
<span id="cb1-168"><a href="#cb1-168" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span> <span class="kw">self</span><span class="op">.</span>should_remove_import_export_stmt(<span class="op">&amp;</span><span class="kw">mut</span> top_stmt<span class="op">,</span> rec_id) <span class="op">{</span></span>
<span id="cb1-169"><a href="#cb1-169" aria-hidden="true" tabindex="-1"></a>              <span class="cf">return</span><span class="op">;</span></span>
<span id="cb1-170"><a href="#cb1-170" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span>
<span id="cb1-171"><a href="#cb1-171" aria-hidden="true" tabindex="-1"></a>          <span class="op">}</span></span>
<span id="cb1-172"><a href="#cb1-172" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb1-173"><a href="#cb1-173" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-174"><a href="#cb1-174" aria-hidden="true" tabindex="-1"></a>        program<span class="op">.</span>body<span class="op">.</span>push(top_stmt)<span class="op">;</span></span>
<span id="cb1-175"><a href="#cb1-175" aria-hidden="true" tabindex="-1"></a>      <span class="op">},</span></span>
<span id="cb1-176"><a href="#cb1-176" aria-hidden="true" tabindex="-1"></a>    )<span class="op">;</span></span>
<span id="cb1-177"><a href="#cb1-177" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-178"><a href="#cb1-178" aria-hidden="true" tabindex="-1"></a>    <span class="co">// visit children</span></span>
<span id="cb1-179"><a href="#cb1-179" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> directive <span class="kw">in</span> program<span class="op">.</span>directives<span class="op">.</span>iter_mut() <span class="op">{</span></span>
<span id="cb1-180"><a href="#cb1-180" aria-hidden="true" tabindex="-1"></a>      <span class="kw">self</span><span class="op">.</span>visit_directive(directive)<span class="op">;</span></span>
<span id="cb1-181"><a href="#cb1-181" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb1-182"><a href="#cb1-182" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> stmt <span class="kw">in</span> program<span class="op">.</span>body<span class="op">.</span>iter_mut() <span class="op">{</span></span>
<span id="cb1-183"><a href="#cb1-183" aria-hidden="true" tabindex="-1"></a>      <span class="kw">self</span><span class="op">.</span>visit_top_level_statement_mut(stmt)<span class="op">;</span></span>
<span id="cb1-184"><a href="#cb1-184" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb1-185"><a href="#cb1-185" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-186"><a href="#cb1-186" aria-hidden="true" tabindex="-1"></a>    <span class="co">// check if we need to add wrapper</span></span>
<span id="cb1-187"><a href="#cb1-187" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> needs_wrapper <span class="op">=</span> <span class="kw">self</span></span>
<span id="cb1-188"><a href="#cb1-188" aria-hidden="true" tabindex="-1"></a>      <span class="op">.</span>ctx</span>
<span id="cb1-189"><a href="#cb1-189" aria-hidden="true" tabindex="-1"></a>      <span class="op">.</span>linking_info</span>
<span id="cb1-190"><a href="#cb1-190" aria-hidden="true" tabindex="-1"></a>      <span class="op">.</span>wrapper_stmt_info</span>
<span id="cb1-191"><a href="#cb1-191" aria-hidden="true" tabindex="-1"></a>      <span class="op">.</span>is_some_and(<span class="op">|</span>idx<span class="op">|</span> <span class="kw">self</span><span class="op">.</span>ctx<span class="op">.</span>module<span class="op">.</span>stmt_infos[idx]<span class="op">.</span>is_included)<span class="op">;</span></span>
<span id="cb1-192"><a href="#cb1-192" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-193"><a href="#cb1-193" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> needs_wrapper <span class="op">{</span></span>
<span id="cb1-194"><a href="#cb1-194" aria-hidden="true" tabindex="-1"></a>      <span class="cf">match</span> <span class="kw">self</span><span class="op">.</span>ctx<span class="op">.</span>linking_info<span class="op">.</span>wrap_kind <span class="op">{</span></span>
<span id="cb1-195"><a href="#cb1-195" aria-hidden="true" tabindex="-1"></a>        <span class="pp">WrapKind::</span>Cjs <span class="op">=&gt;</span> <span class="op">{</span></span>
<span id="cb1-196"><a href="#cb1-196" aria-hidden="true" tabindex="-1"></a>          <span class="kw">let</span> wrap_ref_name <span class="op">=</span> <span class="kw">self</span><span class="op">.</span>canonical_name_for(<span class="kw">self</span><span class="op">.</span>ctx<span class="op">.</span>linking_info<span class="op">.</span>wrapper_ref<span class="op">.</span>unwrap())<span class="op">;</span></span>
<span id="cb1-197"><a href="#cb1-197" aria-hidden="true" tabindex="-1"></a>          <span class="kw">let</span> commonjs_ref_name <span class="op">=</span> <span class="kw">self</span><span class="op">.</span>canonical_name_for_runtime(<span class="st">&quot;__commonJSMin&quot;</span>)<span class="op">;</span></span>
<span id="cb1-198"><a href="#cb1-198" aria-hidden="true" tabindex="-1"></a>          <span class="kw">let</span> old_body <span class="op">=</span> program<span class="op">.</span>body<span class="op">.</span>take_in(<span class="kw">self</span><span class="op">.</span>alloc)<span class="op">;</span></span>
<span id="cb1-199"><a href="#cb1-199" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-200"><a href="#cb1-200" aria-hidden="true" tabindex="-1"></a>          program<span class="op">.</span>body<span class="op">.</span>push(<span class="kw">self</span><span class="op">.</span>snippet<span class="op">.</span>commonjs_wrapper_stmt(</span>
<span id="cb1-201"><a href="#cb1-201" aria-hidden="true" tabindex="-1"></a>            wrap_ref_name<span class="op">,</span></span>
<span id="cb1-202"><a href="#cb1-202" aria-hidden="true" tabindex="-1"></a>            commonjs_ref_name<span class="op">,</span></span>
<span id="cb1-203"><a href="#cb1-203" aria-hidden="true" tabindex="-1"></a>            old_body<span class="op">,</span></span>
<span id="cb1-204"><a href="#cb1-204" aria-hidden="true" tabindex="-1"></a>          ))<span class="op">;</span></span>
<span id="cb1-205"><a href="#cb1-205" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb1-206"><a href="#cb1-206" aria-hidden="true" tabindex="-1"></a>        <span class="pp">WrapKind::</span>Esm <span class="op">=&gt;</span> <span class="op">{</span></span>
<span id="cb1-207"><a href="#cb1-207" aria-hidden="true" tabindex="-1"></a>          <span class="kw">let</span> wrap_ref_name <span class="op">=</span> <span class="kw">self</span><span class="op">.</span>canonical_name_for(<span class="kw">self</span><span class="op">.</span>ctx<span class="op">.</span>linking_info<span class="op">.</span>wrapper_ref<span class="op">.</span>unwrap())<span class="op">;</span></span>
<span id="cb1-208"><a href="#cb1-208" aria-hidden="true" tabindex="-1"></a>          <span class="kw">let</span> esm_ref_name <span class="op">=</span> <span class="kw">self</span><span class="op">.</span>canonical_name_for_runtime(<span class="st">&quot;__esmMin&quot;</span>)<span class="op">;</span></span>
<span id="cb1-209"><a href="#cb1-209" aria-hidden="true" tabindex="-1"></a>          <span class="kw">let</span> old_body <span class="op">=</span> program<span class="op">.</span>body<span class="op">.</span>take_in(<span class="kw">self</span><span class="op">.</span>alloc)<span class="op">;</span></span>
<span id="cb1-210"><a href="#cb1-210" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-211"><a href="#cb1-211" aria-hidden="true" tabindex="-1"></a>          <span class="kw">let</span> <span class="kw">mut</span> fn_stmts <span class="op">=</span> <span class="pp">allocator::</span><span class="dt">Vec</span><span class="pp">::</span>new_in(<span class="kw">self</span><span class="op">.</span>alloc)<span class="op">;</span></span>
<span id="cb1-212"><a href="#cb1-212" aria-hidden="true" tabindex="-1"></a>          <span class="kw">let</span> <span class="kw">mut</span> hoisted_names <span class="op">=</span> <span class="pp">vec!</span>[]<span class="op">;</span></span>
<span id="cb1-213"><a href="#cb1-213" aria-hidden="true" tabindex="-1"></a>          <span class="kw">let</span> <span class="kw">mut</span> stmts_inside_closure <span class="op">=</span> <span class="pp">allocator::</span><span class="dt">Vec</span><span class="pp">::</span>new_in(<span class="kw">self</span><span class="op">.</span>alloc)<span class="op">;</span></span>
<span id="cb1-214"><a href="#cb1-214" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-215"><a href="#cb1-215" aria-hidden="true" tabindex="-1"></a>          <span class="co">// Hoist all top-level &quot;var&quot; and &quot;function&quot; declarations out of the closure</span></span>
<span id="cb1-216"><a href="#cb1-216" aria-hidden="true" tabindex="-1"></a>          old_body<span class="op">.</span>into_iter()<span class="op">.</span>for_each(<span class="op">|</span><span class="kw">mut</span> stmt<span class="op">|</span> <span class="cf">match</span> <span class="op">&amp;</span><span class="kw">mut</span> stmt <span class="op">{</span></span>
<span id="cb1-217"><a href="#cb1-217" aria-hidden="true" tabindex="-1"></a>            <span class="pp">ast::Statement::</span>Declaration(decl) <span class="op">=&gt;</span> <span class="cf">match</span> decl <span class="op">{</span></span>
<span id="cb1-218"><a href="#cb1-218" aria-hidden="true" tabindex="-1"></a>              <span class="pp">ast::Declaration::</span>VariableDeclaration(_) <span class="op">|</span> <span class="pp">ast::Declaration::</span>ClassDeclaration(_) <span class="op">=&gt;</span> <span class="op">{</span></span>
<span id="cb1-219"><a href="#cb1-219" aria-hidden="true" tabindex="-1"></a>                <span class="cf">if</span> <span class="kw">let</span> <span class="cn">Some</span>(converted) <span class="op">=</span> <span class="kw">self</span><span class="op">.</span>convert_decl_to_assignment(decl<span class="op">,</span> <span class="op">&amp;</span><span class="kw">mut</span> hoisted_names) <span class="op">{</span></span>
<span id="cb1-220"><a href="#cb1-220" aria-hidden="true" tabindex="-1"></a>                  stmts_inside_closure<span class="op">.</span>push(converted)<span class="op">;</span></span>
<span id="cb1-221"><a href="#cb1-221" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span></span>
<span id="cb1-222"><a href="#cb1-222" aria-hidden="true" tabindex="-1"></a>              <span class="op">}</span></span>
<span id="cb1-223"><a href="#cb1-223" aria-hidden="true" tabindex="-1"></a>              <span class="pp">ast::Declaration::</span>FunctionDeclaration(_) <span class="op">=&gt;</span> <span class="op">{</span></span>
<span id="cb1-224"><a href="#cb1-224" aria-hidden="true" tabindex="-1"></a>                fn_stmts<span class="op">.</span>push(stmt)<span class="op">;</span></span>
<span id="cb1-225"><a href="#cb1-225" aria-hidden="true" tabindex="-1"></a>              <span class="op">}</span></span>
<span id="cb1-226"><a href="#cb1-226" aria-hidden="true" tabindex="-1"></a>              <span class="pp">ast::Declaration::</span>UsingDeclaration(_) <span class="op">=&gt;</span> <span class="pp">unimplemented!</span>()<span class="op">,</span></span>
<span id="cb1-227"><a href="#cb1-227" aria-hidden="true" tabindex="-1"></a>              _ <span class="op">=&gt;</span> <span class="op">{}</span></span>
<span id="cb1-228"><a href="#cb1-228" aria-hidden="true" tabindex="-1"></a>            <span class="op">},</span></span>
<span id="cb1-229"><a href="#cb1-229" aria-hidden="true" tabindex="-1"></a>            <span class="pp">ast::Statement::</span>ModuleDeclaration(_) <span class="op">=&gt;</span> <span class="pp">unreachable!</span>(</span>
<span id="cb1-230"><a href="#cb1-230" aria-hidden="true" tabindex="-1"></a>              <span class="st">&quot;At this point, all module declarations should have been removed or transformed&quot;</span></span>
<span id="cb1-231"><a href="#cb1-231" aria-hidden="true" tabindex="-1"></a>            )<span class="op">,</span></span>
<span id="cb1-232"><a href="#cb1-232" aria-hidden="true" tabindex="-1"></a>            _ <span class="op">=&gt;</span> <span class="op">{</span></span>
<span id="cb1-233"><a href="#cb1-233" aria-hidden="true" tabindex="-1"></a>              stmts_inside_closure<span class="op">.</span>push(stmt)<span class="op">;</span></span>
<span id="cb1-234"><a href="#cb1-234" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span>
<span id="cb1-235"><a href="#cb1-235" aria-hidden="true" tabindex="-1"></a>          <span class="op">}</span>)<span class="op">;</span></span>
<span id="cb1-236"><a href="#cb1-236" aria-hidden="true" tabindex="-1"></a>          program<span class="op">.</span>body<span class="op">.</span>extend(fn_stmts)<span class="op">;</span></span>
<span id="cb1-237"><a href="#cb1-237" aria-hidden="true" tabindex="-1"></a>          <span class="cf">if</span> <span class="op">!</span>hoisted_names<span class="op">.</span>is_empty() <span class="op">{</span></span>
<span id="cb1-238"><a href="#cb1-238" aria-hidden="true" tabindex="-1"></a>            <span class="kw">let</span> <span class="kw">mut</span> declarators <span class="op">=</span> <span class="pp">allocator::</span><span class="dt">Vec</span><span class="pp">::</span>new_in(<span class="kw">self</span><span class="op">.</span>alloc)<span class="op">;</span></span>
<span id="cb1-239"><a href="#cb1-239" aria-hidden="true" tabindex="-1"></a>            declarators<span class="op">.</span>reserve_exact(hoisted_names<span class="op">.</span>len())<span class="op">;</span></span>
<span id="cb1-240"><a href="#cb1-240" aria-hidden="true" tabindex="-1"></a>            hoisted_names<span class="op">.</span>into_iter()<span class="op">.</span>for_each(<span class="op">|</span>var_name<span class="op">|</span> <span class="op">{</span></span>
<span id="cb1-241"><a href="#cb1-241" aria-hidden="true" tabindex="-1"></a>              declarators<span class="op">.</span>push(<span class="pp">ast::</span>VariableDeclarator <span class="op">{</span></span>
<span id="cb1-242"><a href="#cb1-242" aria-hidden="true" tabindex="-1"></a>                id<span class="op">:</span> <span class="pp">ast::</span>BindingPattern <span class="op">{</span></span>
<span id="cb1-243"><a href="#cb1-243" aria-hidden="true" tabindex="-1"></a>                  kind<span class="op">:</span> <span class="pp">ast::BindingPatternKind::</span>BindingIdentifier(</span>
<span id="cb1-244"><a href="#cb1-244" aria-hidden="true" tabindex="-1"></a>                    <span class="kw">self</span><span class="op">.</span>snippet<span class="op">.</span>id(<span class="op">&amp;</span>var_name<span class="op">,</span> SPAN)<span class="op">.</span>into_in(<span class="kw">self</span><span class="op">.</span>alloc)<span class="op">,</span></span>
<span id="cb1-245"><a href="#cb1-245" aria-hidden="true" tabindex="-1"></a>                  )<span class="op">,</span></span>
<span id="cb1-246"><a href="#cb1-246" aria-hidden="true" tabindex="-1"></a>                  <span class="op">..</span><span class="pp">Dummy::</span>dummy(<span class="kw">self</span><span class="op">.</span>alloc)</span>
<span id="cb1-247"><a href="#cb1-247" aria-hidden="true" tabindex="-1"></a>                <span class="op">},</span></span>
<span id="cb1-248"><a href="#cb1-248" aria-hidden="true" tabindex="-1"></a>                kind<span class="op">:</span> <span class="pp">ast::VariableDeclarationKind::</span>Var<span class="op">,</span></span>
<span id="cb1-249"><a href="#cb1-249" aria-hidden="true" tabindex="-1"></a>                <span class="op">..</span><span class="pp">Dummy::</span>dummy(<span class="kw">self</span><span class="op">.</span>alloc)</span>
<span id="cb1-250"><a href="#cb1-250" aria-hidden="true" tabindex="-1"></a>              <span class="op">}</span>)<span class="op">;</span></span>
<span id="cb1-251"><a href="#cb1-251" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span>)<span class="op">;</span></span>
<span id="cb1-252"><a href="#cb1-252" aria-hidden="true" tabindex="-1"></a>            program<span class="op">.</span>body<span class="op">.</span>push(<span class="pp">ast::Statement::</span>Declaration(<span class="pp">ast::Declaration::</span>VariableDeclaration(</span>
<span id="cb1-253"><a href="#cb1-253" aria-hidden="true" tabindex="-1"></a>              <span class="pp">ast::</span>VariableDeclaration <span class="op">{</span></span>
<span id="cb1-254"><a href="#cb1-254" aria-hidden="true" tabindex="-1"></a>                declarations<span class="op">:</span> declarators<span class="op">,</span></span>
<span id="cb1-255"><a href="#cb1-255" aria-hidden="true" tabindex="-1"></a>                kind<span class="op">:</span> <span class="pp">ast::VariableDeclarationKind::</span>Var<span class="op">,</span></span>
<span id="cb1-256"><a href="#cb1-256" aria-hidden="true" tabindex="-1"></a>                <span class="op">..</span><span class="pp">Dummy::</span>dummy(<span class="kw">self</span><span class="op">.</span>alloc)</span>
<span id="cb1-257"><a href="#cb1-257" aria-hidden="true" tabindex="-1"></a>              <span class="op">}</span></span>
<span id="cb1-258"><a href="#cb1-258" aria-hidden="true" tabindex="-1"></a>              <span class="op">.</span>into_in(<span class="kw">self</span><span class="op">.</span>alloc)<span class="op">,</span></span>
<span id="cb1-259"><a href="#cb1-259" aria-hidden="true" tabindex="-1"></a>            )))<span class="op">;</span></span>
<span id="cb1-260"><a href="#cb1-260" aria-hidden="true" tabindex="-1"></a>          <span class="op">}</span></span>
<span id="cb1-261"><a href="#cb1-261" aria-hidden="true" tabindex="-1"></a>          program<span class="op">.</span>body<span class="op">.</span>push(<span class="kw">self</span><span class="op">.</span>snippet<span class="op">.</span>esm_wrapper_stmt(</span>
<span id="cb1-262"><a href="#cb1-262" aria-hidden="true" tabindex="-1"></a>            wrap_ref_name<span class="op">,</span></span>
<span id="cb1-263"><a href="#cb1-263" aria-hidden="true" tabindex="-1"></a>            esm_ref_name<span class="op">,</span></span>
<span id="cb1-264"><a href="#cb1-264" aria-hidden="true" tabindex="-1"></a>            stmts_inside_closure<span class="op">,</span></span>
<span id="cb1-265"><a href="#cb1-265" aria-hidden="true" tabindex="-1"></a>          ))<span class="op">;</span></span>
<span id="cb1-266"><a href="#cb1-266" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb1-267"><a href="#cb1-267" aria-hidden="true" tabindex="-1"></a>        <span class="pp">WrapKind::</span><span class="cn">None</span> <span class="op">=&gt;</span> <span class="op">{}</span></span>
<span id="cb1-268"><a href="#cb1-268" aria-hidden="true" tabindex="-1"></a>      <span class="op">}</span></span>
<span id="cb1-269"><a href="#cb1-269" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb1-270"><a href="#cb1-270" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb1-271"><a href="#cb1-271" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-272"><a href="#cb1-272" aria-hidden="true" tabindex="-1"></a>  <span class="kw">fn</span> visit_binding_identifier(<span class="op">&amp;</span><span class="kw">mut</span> <span class="kw">self</span><span class="op">,</span> ident<span class="op">:</span> <span class="op">&amp;</span><span class="kw">mut</span> <span class="pp">ast::</span>BindingIdentifier<span class="op">&lt;</span><span class="ot">&#39;ast</span><span class="op">&gt;</span>) <span class="op">{</span></span>
<span id="cb1-273"><a href="#cb1-273" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="kw">let</span> <span class="cn">Some</span>(symbol_id) <span class="op">=</span> ident<span class="op">.</span>symbol_id<span class="op">.</span>get() <span class="op">{</span></span>
<span id="cb1-274"><a href="#cb1-274" aria-hidden="true" tabindex="-1"></a>      <span class="kw">let</span> symbol_ref<span class="op">:</span> SymbolRef <span class="op">=</span> (<span class="kw">self</span><span class="op">.</span>ctx<span class="op">.</span>id<span class="op">,</span> symbol_id)<span class="op">.</span>into()<span class="op">;</span></span>
<span id="cb1-275"><a href="#cb1-275" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-276"><a href="#cb1-276" aria-hidden="true" tabindex="-1"></a>      <span class="kw">let</span> canonical_ref <span class="op">=</span> <span class="kw">self</span><span class="op">.</span>ctx<span class="op">.</span>symbols<span class="op">.</span>par_canonical_ref_for(symbol_ref)<span class="op">;</span></span>
<span id="cb1-277"><a href="#cb1-277" aria-hidden="true" tabindex="-1"></a>      <span class="kw">let</span> symbol <span class="op">=</span> <span class="kw">self</span><span class="op">.</span>ctx<span class="op">.</span>symbols<span class="op">.</span>get(canonical_ref)<span class="op">;</span></span>
<span id="cb1-278"><a href="#cb1-278" aria-hidden="true" tabindex="-1"></a>      <span class="pp">assert!</span>(symbol<span class="op">.</span>namespace_alias<span class="op">.</span>is_none())<span class="op">;</span></span>
<span id="cb1-279"><a href="#cb1-279" aria-hidden="true" tabindex="-1"></a>      <span class="kw">let</span> canonical_name <span class="op">=</span> <span class="kw">self</span><span class="op">.</span>canonical_name_for(symbol_ref)<span class="op">;</span></span>
<span id="cb1-280"><a href="#cb1-280" aria-hidden="true" tabindex="-1"></a>      <span class="cf">if</span> ident<span class="op">.</span>name <span class="op">!=</span> canonical_name<span class="op">.</span>as_str() <span class="op">{</span></span>
<span id="cb1-281"><a href="#cb1-281" aria-hidden="true" tabindex="-1"></a>        ident<span class="op">.</span>name <span class="op">=</span> <span class="kw">self</span><span class="op">.</span>snippet<span class="op">.</span>atom(canonical_name)<span class="op">;</span></span>
<span id="cb1-282"><a href="#cb1-282" aria-hidden="true" tabindex="-1"></a>      <span class="op">}</span></span>
<span id="cb1-283"><a href="#cb1-283" aria-hidden="true" tabindex="-1"></a>      ident<span class="op">.</span>symbol_id<span class="op">.</span>get_mut()<span class="op">.</span>take()<span class="op">;</span></span>
<span id="cb1-284"><a href="#cb1-284" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span> <span class="cf">else</span> <span class="op">{</span></span>
<span id="cb1-285"><a href="#cb1-285" aria-hidden="true" tabindex="-1"></a>      <span class="co">// Some `BindingIdentifier`s constructed by bundler don&#39;t have `SymbolId` and we just ignore them.</span></span>
<span id="cb1-286"><a href="#cb1-286" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb1-287"><a href="#cb1-287" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb1-288"><a href="#cb1-288" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-289"><a href="#cb1-289" aria-hidden="true" tabindex="-1"></a>  <span class="kw">fn</span> visit_identifier_reference(<span class="op">&amp;</span><span class="kw">mut</span> <span class="kw">self</span><span class="op">,</span> ident<span class="op">:</span> <span class="op">&amp;</span><span class="kw">mut</span> <span class="pp">ast::</span>IdentifierReference) <span class="op">{</span></span>
<span id="cb1-290"><a href="#cb1-290" aria-hidden="true" tabindex="-1"></a>    <span class="co">// This ensure all `IdentifierReference`s are processed</span></span>
<span id="cb1-291"><a href="#cb1-291" aria-hidden="true" tabindex="-1"></a>    <span class="pp">debug_assert!</span>(</span>
<span id="cb1-292"><a href="#cb1-292" aria-hidden="true" tabindex="-1"></a>      <span class="kw">self</span><span class="op">.</span>is_global_identifier_reference(ident) <span class="op">||</span> ident<span class="op">.</span>reference_id<span class="op">.</span>get()<span class="op">.</span>is_none()<span class="op">,</span></span>
<span id="cb1-293"><a href="#cb1-293" aria-hidden="true" tabindex="-1"></a>      <span class="st">&quot;{} doesn&#39;t get processed in {}&quot;</span><span class="op">,</span></span>
<span id="cb1-294"><a href="#cb1-294" aria-hidden="true" tabindex="-1"></a>      ident<span class="op">.</span>name<span class="op">,</span></span>
<span id="cb1-295"><a href="#cb1-295" aria-hidden="true" tabindex="-1"></a>      <span class="kw">self</span><span class="op">.</span>ctx<span class="op">.</span>module<span class="op">.</span>repr_name</span>
<span id="cb1-296"><a href="#cb1-296" aria-hidden="true" tabindex="-1"></a>    )<span class="op">;</span></span>
<span id="cb1-297"><a href="#cb1-297" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb1-298"><a href="#cb1-298" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-299"><a href="#cb1-299" aria-hidden="true" tabindex="-1"></a>  <span class="kw">fn</span> visit_call_expression(<span class="op">&amp;</span><span class="kw">mut</span> <span class="kw">self</span><span class="op">,</span> expr<span class="op">:</span> <span class="op">&amp;</span><span class="kw">mut</span> <span class="pp">ast::</span>CallExpression<span class="op">&lt;</span><span class="ot">&#39;ast</span><span class="op">&gt;</span>) <span class="op">{</span></span>
<span id="cb1-300"><a href="#cb1-300" aria-hidden="true" tabindex="-1"></a>    <span class="kw">self</span><span class="op">.</span>try_rewrite_identifier_reference_expr(<span class="op">&amp;</span><span class="kw">mut</span> expr<span class="op">.</span>callee<span class="op">,</span> <span class="cn">true</span>)<span class="op">;</span></span>
<span id="cb1-301"><a href="#cb1-301" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-302"><a href="#cb1-302" aria-hidden="true" tabindex="-1"></a>    <span class="co">// visit children</span></span>
<span id="cb1-303"><a href="#cb1-303" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> arg <span class="kw">in</span> expr<span class="op">.</span>arguments<span class="op">.</span>iter_mut() <span class="op">{</span></span>
<span id="cb1-304"><a href="#cb1-304" aria-hidden="true" tabindex="-1"></a>      <span class="kw">self</span><span class="op">.</span>visit_argument(arg)<span class="op">;</span></span>
<span id="cb1-305"><a href="#cb1-305" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb1-306"><a href="#cb1-306" aria-hidden="true" tabindex="-1"></a>    <span class="kw">self</span><span class="op">.</span>visit_expression(<span class="op">&amp;</span><span class="kw">mut</span> expr<span class="op">.</span>callee)<span class="op">;</span></span>
<span id="cb1-307"><a href="#cb1-307" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="kw">let</span> <span class="cn">Some</span>(parameters) <span class="op">=</span> <span class="op">&amp;</span><span class="kw">mut</span> expr<span class="op">.</span>type_parameters <span class="op">{</span></span>
<span id="cb1-308"><a href="#cb1-308" aria-hidden="true" tabindex="-1"></a>      <span class="kw">self</span><span class="op">.</span>visit_ts_type_parameter_instantiation(parameters)<span class="op">;</span></span>
<span id="cb1-309"><a href="#cb1-309" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb1-310"><a href="#cb1-310" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb1-311"><a href="#cb1-311" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-312"><a href="#cb1-312" aria-hidden="true" tabindex="-1"></a>  <span class="at">#[</span>allow<span class="at">(</span><span class="pp">clippy::</span>collapsible_else_if<span class="at">)]</span></span>
<span id="cb1-313"><a href="#cb1-313" aria-hidden="true" tabindex="-1"></a>  <span class="kw">fn</span> visit_expression(<span class="op">&amp;</span><span class="kw">mut</span> <span class="kw">self</span><span class="op">,</span> expr<span class="op">:</span> <span class="op">&amp;</span><span class="kw">mut</span> <span class="pp">ast::</span>Expression<span class="op">&lt;</span><span class="ot">&#39;ast</span><span class="op">&gt;</span>) <span class="op">{</span></span>
<span id="cb1-314"><a href="#cb1-314" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="kw">let</span> <span class="cn">Some</span>(call_expr) <span class="op">=</span> expr<span class="op">.</span>as_call_expression() <span class="op">{</span></span>
<span id="cb1-315"><a href="#cb1-315" aria-hidden="true" tabindex="-1"></a>      <span class="co">// Rewrite `require(...)` to `require_xxx(...)` or `(init_xxx(), __toCommonJS(xxx_exports))`</span></span>
<span id="cb1-316"><a href="#cb1-316" aria-hidden="true" tabindex="-1"></a>      <span class="cf">if</span> <span class="kw">let</span> <span class="pp">ast::Expression::</span>Identifier(callee) <span class="op">=</span> <span class="op">&amp;</span>call_expr<span class="op">.</span>callee <span class="op">{</span></span>
<span id="cb1-317"><a href="#cb1-317" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> callee<span class="op">.</span>name <span class="op">==</span> <span class="st">&quot;require&quot;</span> <span class="op">&amp;&amp;</span> <span class="kw">self</span><span class="op">.</span>is_global_identifier_reference(callee) <span class="op">{</span></span>
<span id="cb1-318"><a href="#cb1-318" aria-hidden="true" tabindex="-1"></a>          <span class="kw">let</span> rec_id <span class="op">=</span> <span class="kw">self</span><span class="op">.</span>ctx<span class="op">.</span>module<span class="op">.</span>imports[<span class="op">&amp;</span>call_expr<span class="op">.</span>span]<span class="op">;</span></span>
<span id="cb1-319"><a href="#cb1-319" aria-hidden="true" tabindex="-1"></a>          <span class="kw">let</span> rec <span class="op">=</span> <span class="op">&amp;</span><span class="kw">self</span><span class="op">.</span>ctx<span class="op">.</span>module<span class="op">.</span>import_records[rec_id]<span class="op">;</span></span>
<span id="cb1-320"><a href="#cb1-320" aria-hidden="true" tabindex="-1"></a>          <span class="cf">if</span> <span class="kw">let</span> <span class="pp">ModuleId::</span>Normal(importee_id) <span class="op">=</span> rec<span class="op">.</span>resolved_module <span class="op">{</span></span>
<span id="cb1-321"><a href="#cb1-321" aria-hidden="true" tabindex="-1"></a>            <span class="kw">let</span> importee <span class="op">=</span> <span class="op">&amp;</span><span class="kw">self</span><span class="op">.</span>ctx<span class="op">.</span>modules[importee_id]<span class="op">;</span></span>
<span id="cb1-322"><a href="#cb1-322" aria-hidden="true" tabindex="-1"></a>            <span class="kw">let</span> importee_linking_info <span class="op">=</span> <span class="op">&amp;</span><span class="kw">self</span><span class="op">.</span>ctx<span class="op">.</span>linking_infos[importee<span class="op">.</span>id]<span class="op">;</span></span>
<span id="cb1-323"><a href="#cb1-323" aria-hidden="true" tabindex="-1"></a>            <span class="kw">let</span> wrap_ref_name <span class="op">=</span> <span class="kw">self</span><span class="op">.</span>canonical_name_for(importee_linking_info<span class="op">.</span>wrapper_ref<span class="op">.</span>unwrap())<span class="op">;</span></span>
<span id="cb1-324"><a href="#cb1-324" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span> <span class="pp">matches!</span>(importee<span class="op">.</span>exports_kind<span class="op">,</span> <span class="pp">ExportsKind::</span>CommonJs) <span class="op">{</span></span>
<span id="cb1-325"><a href="#cb1-325" aria-hidden="true" tabindex="-1"></a>              <span class="op">*</span>expr <span class="op">=</span> <span class="kw">self</span><span class="op">.</span>snippet<span class="op">.</span>call_expr_expr(wrap_ref_name)<span class="op">;</span></span>
<span id="cb1-326"><a href="#cb1-326" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span> <span class="cf">else</span> <span class="op">{</span></span>
<span id="cb1-327"><a href="#cb1-327" aria-hidden="true" tabindex="-1"></a>              <span class="kw">let</span> ns_name <span class="op">=</span> <span class="kw">self</span><span class="op">.</span>canonical_name_for(importee<span class="op">.</span>namespace_symbol)<span class="op">;</span></span>
<span id="cb1-328"><a href="#cb1-328" aria-hidden="true" tabindex="-1"></a>              <span class="kw">let</span> to_commonjs_ref_name <span class="op">=</span> <span class="kw">self</span><span class="op">.</span>canonical_name_for_runtime(<span class="st">&quot;__toCommonJS&quot;</span>)<span class="op">;</span></span>
<span id="cb1-329"><a href="#cb1-329" aria-hidden="true" tabindex="-1"></a>              <span class="op">*</span>expr <span class="op">=</span> <span class="kw">self</span><span class="op">.</span>snippet<span class="op">.</span>seq2_in_paren_expr(</span>
<span id="cb1-330"><a href="#cb1-330" aria-hidden="true" tabindex="-1"></a>                <span class="kw">self</span><span class="op">.</span>snippet<span class="op">.</span>call_expr_expr(wrap_ref_name)<span class="op">,</span></span>
<span id="cb1-331"><a href="#cb1-331" aria-hidden="true" tabindex="-1"></a>                <span class="kw">self</span><span class="op">.</span>snippet<span class="op">.</span>call_expr_with_arg_expr(to_commonjs_ref_name<span class="op">,</span> ns_name)<span class="op">,</span></span>
<span id="cb1-332"><a href="#cb1-332" aria-hidden="true" tabindex="-1"></a>              )<span class="op">;</span></span>
<span id="cb1-333"><a href="#cb1-333" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span>
<span id="cb1-334"><a href="#cb1-334" aria-hidden="true" tabindex="-1"></a>          <span class="op">}</span></span>
<span id="cb1-335"><a href="#cb1-335" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb1-336"><a href="#cb1-336" aria-hidden="true" tabindex="-1"></a>      <span class="op">}</span></span>
<span id="cb1-337"><a href="#cb1-337" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb1-338"><a href="#cb1-338" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-339"><a href="#cb1-339" aria-hidden="true" tabindex="-1"></a>    <span class="kw">self</span><span class="op">.</span>try_rewrite_identifier_reference_expr(expr<span class="op">,</span> <span class="cn">false</span>)<span class="op">;</span></span>
<span id="cb1-340"><a href="#cb1-340" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-341"><a href="#cb1-341" aria-hidden="true" tabindex="-1"></a>    <span class="co">// visit children</span></span>
<span id="cb1-342"><a href="#cb1-342" aria-hidden="true" tabindex="-1"></a>    walk_expression_mut(<span class="kw">self</span><span class="op">,</span> expr)<span class="op">;</span></span>
<span id="cb1-343"><a href="#cb1-343" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb1-344"><a href="#cb1-344" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-345"><a href="#cb1-345" aria-hidden="true" tabindex="-1"></a>  <span class="kw">fn</span> visit_object_property(<span class="op">&amp;</span><span class="kw">mut</span> <span class="kw">self</span><span class="op">,</span> prop<span class="op">:</span> <span class="op">&amp;</span><span class="kw">mut</span> <span class="pp">ast::</span>ObjectProperty<span class="op">&lt;</span><span class="ot">&#39;ast</span><span class="op">&gt;</span>) <span class="op">{</span></span>
<span id="cb1-346"><a href="#cb1-346" aria-hidden="true" tabindex="-1"></a>    <span class="co">// Ensure `{ a }` would be rewritten to `{ a: a$1 }` instead of `{ a$1 }`</span></span>
<span id="cb1-347"><a href="#cb1-347" aria-hidden="true" tabindex="-1"></a>    <span class="cf">match</span> <span class="op">&amp;</span><span class="kw">mut</span> prop<span class="op">.</span>value <span class="op">{</span></span>
<span id="cb1-348"><a href="#cb1-348" aria-hidden="true" tabindex="-1"></a>      <span class="pp">ast::Expression::</span>Identifier(id_ref) <span class="cf">if</span> prop<span class="op">.</span>shorthand <span class="op">=&gt;</span> <span class="op">{</span></span>
<span id="cb1-349"><a href="#cb1-349" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="kw">let</span> <span class="cn">Some</span>(expr) <span class="op">=</span> <span class="kw">self</span><span class="op">.</span>generate_finalized_expr_for_reference(id_ref<span class="op">,</span> <span class="cn">false</span>) <span class="op">{</span></span>
<span id="cb1-350"><a href="#cb1-350" aria-hidden="true" tabindex="-1"></a>          prop<span class="op">.</span>value <span class="op">=</span> expr<span class="op">;</span></span>
<span id="cb1-351"><a href="#cb1-351" aria-hidden="true" tabindex="-1"></a>          prop<span class="op">.</span>shorthand <span class="op">=</span> <span class="cn">false</span><span class="op">;</span></span>
<span id="cb1-352"><a href="#cb1-352" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span> <span class="cf">else</span> <span class="op">{</span></span>
<span id="cb1-353"><a href="#cb1-353" aria-hidden="true" tabindex="-1"></a>          id_ref<span class="op">.</span>reference_id<span class="op">.</span>get_mut()<span class="op">.</span>take()<span class="op">;</span></span>
<span id="cb1-354"><a href="#cb1-354" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb1-355"><a href="#cb1-355" aria-hidden="true" tabindex="-1"></a>      <span class="op">}</span></span>
<span id="cb1-356"><a href="#cb1-356" aria-hidden="true" tabindex="-1"></a>      _ <span class="op">=&gt;</span> <span class="op">{}</span></span>
<span id="cb1-357"><a href="#cb1-357" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb1-358"><a href="#cb1-358" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-359"><a href="#cb1-359" aria-hidden="true" tabindex="-1"></a>    <span class="co">// visit children</span></span>
<span id="cb1-360"><a href="#cb1-360" aria-hidden="true" tabindex="-1"></a>    <span class="kw">self</span><span class="op">.</span>visit_property_key(<span class="op">&amp;</span><span class="kw">mut</span> prop<span class="op">.</span>key)<span class="op">;</span></span>
<span id="cb1-361"><a href="#cb1-361" aria-hidden="true" tabindex="-1"></a>    <span class="kw">self</span><span class="op">.</span>visit_expression(<span class="op">&amp;</span><span class="kw">mut</span> prop<span class="op">.</span>value)<span class="op">;</span></span>
<span id="cb1-362"><a href="#cb1-362" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="kw">let</span> <span class="cn">Some</span>(init) <span class="op">=</span> <span class="op">&amp;</span><span class="kw">mut</span> prop<span class="op">.</span>init <span class="op">{</span></span>
<span id="cb1-363"><a href="#cb1-363" aria-hidden="true" tabindex="-1"></a>      <span class="kw">self</span><span class="op">.</span>visit_expression(init)<span class="op">;</span></span>
<span id="cb1-364"><a href="#cb1-364" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb1-365"><a href="#cb1-365" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb1-366"><a href="#cb1-366" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-367"><a href="#cb1-367" aria-hidden="true" tabindex="-1"></a>  <span class="kw">fn</span> visit_object_pattern(<span class="op">&amp;</span><span class="kw">mut</span> <span class="kw">self</span><span class="op">,</span> pat<span class="op">:</span> <span class="op">&amp;</span><span class="kw">mut</span> <span class="pp">ast::</span>ObjectPattern<span class="op">&lt;</span><span class="ot">&#39;ast</span><span class="op">&gt;</span>) <span class="op">{</span></span>
<span id="cb1-368"><a href="#cb1-368" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> prop <span class="kw">in</span> pat<span class="op">.</span>properties<span class="op">.</span>iter_mut() <span class="op">{</span></span>
<span id="cb1-369"><a href="#cb1-369" aria-hidden="true" tabindex="-1"></a>      <span class="cf">match</span> <span class="op">&amp;</span><span class="kw">mut</span> prop<span class="op">.</span>value<span class="op">.</span>kind <span class="op">{</span></span>
<span id="cb1-370"><a href="#cb1-370" aria-hidden="true" tabindex="-1"></a>        <span class="co">// Ensure `const { a } = ...;` will be rewritten to `const { a: a$1 } = ...` instead of `const { a$1 } = ...`</span></span>
<span id="cb1-371"><a href="#cb1-371" aria-hidden="true" tabindex="-1"></a>        <span class="co">// Ensure `function foo({ a }) {}` will be rewritten to `function foo({ a: a$1 }) {}` instead of `function foo({ a$1 }) {}`</span></span>
<span id="cb1-372"><a href="#cb1-372" aria-hidden="true" tabindex="-1"></a>        <span class="pp">ast::BindingPatternKind::</span>BindingIdentifier(ident) <span class="cf">if</span> prop<span class="op">.</span>shorthand <span class="op">=&gt;</span> <span class="op">{</span></span>
<span id="cb1-373"><a href="#cb1-373" aria-hidden="true" tabindex="-1"></a>          <span class="cf">if</span> <span class="kw">let</span> <span class="cn">Some</span>(symbol_id) <span class="op">=</span> ident<span class="op">.</span>symbol_id<span class="op">.</span>get() <span class="op">{</span></span>
<span id="cb1-374"><a href="#cb1-374" aria-hidden="true" tabindex="-1"></a>            <span class="kw">let</span> canonical_name <span class="op">=</span> <span class="kw">self</span><span class="op">.</span>canonical_name_for((<span class="kw">self</span><span class="op">.</span>ctx<span class="op">.</span>id<span class="op">,</span> symbol_id)<span class="op">.</span>into())<span class="op">;</span></span>
<span id="cb1-375"><a href="#cb1-375" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span> ident<span class="op">.</span>name <span class="op">!=</span> canonical_name<span class="op">.</span>as_str() <span class="op">{</span></span>
<span id="cb1-376"><a href="#cb1-376" aria-hidden="true" tabindex="-1"></a>              ident<span class="op">.</span>name <span class="op">=</span> <span class="kw">self</span><span class="op">.</span>snippet<span class="op">.</span>atom(canonical_name)<span class="op">;</span></span>
<span id="cb1-377"><a href="#cb1-377" aria-hidden="true" tabindex="-1"></a>              prop<span class="op">.</span>shorthand <span class="op">=</span> <span class="cn">false</span><span class="op">;</span></span>
<span id="cb1-378"><a href="#cb1-378" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span>
<span id="cb1-379"><a href="#cb1-379" aria-hidden="true" tabindex="-1"></a>            ident<span class="op">.</span>symbol_id<span class="op">.</span>get_mut()<span class="op">.</span>take()<span class="op">;</span></span>
<span id="cb1-380"><a href="#cb1-380" aria-hidden="true" tabindex="-1"></a>          <span class="op">}</span></span>
<span id="cb1-381"><a href="#cb1-381" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb1-382"><a href="#cb1-382" aria-hidden="true" tabindex="-1"></a>        <span class="co">// Ensure `const { a = 1 } = ...;` will be rewritten to `const { a: a$1 = 1 } = ...` instead of `const { a$1 = 1 } = ...`</span></span>
<span id="cb1-383"><a href="#cb1-383" aria-hidden="true" tabindex="-1"></a>        <span class="co">// Ensure `function foo({ a = 1 }) {}` will be rewritten to `function foo({ a: a$1 = 1 }) {}` instead of `function foo({ a$1 = 1 }) {}`</span></span>
<span id="cb1-384"><a href="#cb1-384" aria-hidden="true" tabindex="-1"></a>        <span class="pp">ast::BindingPatternKind::</span>AssignmentPattern(assign_pat)</span>
<span id="cb1-385"><a href="#cb1-385" aria-hidden="true" tabindex="-1"></a>          <span class="cf">if</span> prop<span class="op">.</span>shorthand</span>
<span id="cb1-386"><a href="#cb1-386" aria-hidden="true" tabindex="-1"></a>            <span class="op">&amp;&amp;</span> <span class="pp">matches!</span>(assign_pat<span class="op">.</span>left<span class="op">.</span>kind<span class="op">,</span> <span class="pp">ast::BindingPatternKind::</span>BindingIdentifier(_)) <span class="op">=&gt;</span></span>
<span id="cb1-387"><a href="#cb1-387" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span>
<span id="cb1-388"><a href="#cb1-388" aria-hidden="true" tabindex="-1"></a>          <span class="kw">let</span> <span class="pp">ast::BindingPatternKind::</span>BindingIdentifier(ident) <span class="op">=</span> <span class="op">&amp;</span><span class="kw">mut</span> assign_pat<span class="op">.</span>left<span class="op">.</span>kind <span class="cf">else</span> <span class="op">{</span></span>
<span id="cb1-389"><a href="#cb1-389" aria-hidden="true" tabindex="-1"></a>            <span class="pp">unreachable!</span>()</span>
<span id="cb1-390"><a href="#cb1-390" aria-hidden="true" tabindex="-1"></a>          <span class="op">};</span></span>
<span id="cb1-391"><a href="#cb1-391" aria-hidden="true" tabindex="-1"></a>          <span class="cf">if</span> <span class="kw">let</span> <span class="cn">Some</span>(symbol_id) <span class="op">=</span> ident<span class="op">.</span>symbol_id<span class="op">.</span>get() <span class="op">{</span></span>
<span id="cb1-392"><a href="#cb1-392" aria-hidden="true" tabindex="-1"></a>            <span class="kw">let</span> canonical_name <span class="op">=</span> <span class="kw">self</span><span class="op">.</span>canonical_name_for((<span class="kw">self</span><span class="op">.</span>ctx<span class="op">.</span>id<span class="op">,</span> symbol_id)<span class="op">.</span>into())<span class="op">;</span></span>
<span id="cb1-393"><a href="#cb1-393" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span> ident<span class="op">.</span>name <span class="op">!=</span> canonical_name<span class="op">.</span>as_str() <span class="op">{</span></span>
<span id="cb1-394"><a href="#cb1-394" aria-hidden="true" tabindex="-1"></a>              ident<span class="op">.</span>name <span class="op">=</span> <span class="kw">self</span><span class="op">.</span>snippet<span class="op">.</span>atom(canonical_name)<span class="op">;</span></span>
<span id="cb1-395"><a href="#cb1-395" aria-hidden="true" tabindex="-1"></a>              prop<span class="op">.</span>shorthand <span class="op">=</span> <span class="cn">false</span><span class="op">;</span></span>
<span id="cb1-396"><a href="#cb1-396" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span>
<span id="cb1-397"><a href="#cb1-397" aria-hidden="true" tabindex="-1"></a>            ident<span class="op">.</span>symbol_id<span class="op">.</span>get_mut()<span class="op">.</span>take()<span class="op">;</span></span>
<span id="cb1-398"><a href="#cb1-398" aria-hidden="true" tabindex="-1"></a>          <span class="op">}</span></span>
<span id="cb1-399"><a href="#cb1-399" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb1-400"><a href="#cb1-400" aria-hidden="true" tabindex="-1"></a>        _ <span class="op">=&gt;</span> <span class="op">{</span></span>
<span id="cb1-401"><a href="#cb1-401" aria-hidden="true" tabindex="-1"></a>          <span class="co">// For other patterns:</span></span>
<span id="cb1-402"><a href="#cb1-402" aria-hidden="true" tabindex="-1"></a>          <span class="co">// - `const [a] = ...` or `function foo([a]) {}`</span></span>
<span id="cb1-403"><a href="#cb1-403" aria-hidden="true" tabindex="-1"></a>          <span class="co">// - `const { a: b } = ...` or `function foo({ a: b }) {}`</span></span>
<span id="cb1-404"><a href="#cb1-404" aria-hidden="true" tabindex="-1"></a>          <span class="co">// - `const { a: b = 1 } = ...` or `function foo({ a: b = 1 }) {}`</span></span>
<span id="cb1-405"><a href="#cb1-405" aria-hidden="true" tabindex="-1"></a>          <span class="co">// They could keep correct semantics after renaming, so we don&#39;t need to do anything special.</span></span>
<span id="cb1-406"><a href="#cb1-406" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb1-407"><a href="#cb1-407" aria-hidden="true" tabindex="-1"></a>      <span class="op">}</span></span>
<span id="cb1-408"><a href="#cb1-408" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb1-409"><a href="#cb1-409" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-410"><a href="#cb1-410" aria-hidden="true" tabindex="-1"></a>    <span class="co">// visit children</span></span>
<span id="cb1-411"><a href="#cb1-411" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> prop <span class="kw">in</span> pat<span class="op">.</span>properties<span class="op">.</span>iter_mut() <span class="op">{</span></span>
<span id="cb1-412"><a href="#cb1-412" aria-hidden="true" tabindex="-1"></a>      <span class="kw">self</span><span class="op">.</span>visit_binding_property(prop)<span class="op">;</span></span>
<span id="cb1-413"><a href="#cb1-413" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb1-414"><a href="#cb1-414" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="kw">let</span> <span class="cn">Some</span>(rest) <span class="op">=</span> <span class="op">&amp;</span><span class="kw">mut</span> pat<span class="op">.</span>rest <span class="op">{</span></span>
<span id="cb1-415"><a href="#cb1-415" aria-hidden="true" tabindex="-1"></a>      <span class="kw">self</span><span class="op">.</span>visit_rest_element(rest)<span class="op">;</span></span>
<span id="cb1-416"><a href="#cb1-416" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb1-417"><a href="#cb1-417" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb1-418"><a href="#cb1-418" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-419"><a href="#cb1-419" aria-hidden="true" tabindex="-1"></a>  <span class="kw">fn</span> visit_import_expression(<span class="op">&amp;</span><span class="kw">mut</span> <span class="kw">self</span><span class="op">,</span> expr<span class="op">:</span> <span class="op">&amp;</span><span class="kw">mut</span> <span class="pp">ast::</span>ImportExpression<span class="op">&lt;</span><span class="ot">&#39;ast</span><span class="op">&gt;</span>) <span class="op">{</span></span>
<span id="cb1-420"><a href="#cb1-420" aria-hidden="true" tabindex="-1"></a>    <span class="co">// Make sure the import expression is in correct form. If it&#39;s not, we should leave it as it is.</span></span>
<span id="cb1-421"><a href="#cb1-421" aria-hidden="true" tabindex="-1"></a>    <span class="cf">match</span> <span class="op">&amp;</span><span class="kw">mut</span> expr<span class="op">.</span>source <span class="op">{</span></span>
<span id="cb1-422"><a href="#cb1-422" aria-hidden="true" tabindex="-1"></a>      <span class="pp">ast::Expression::</span>StringLiteral(<span class="dt">str</span>) <span class="cf">if</span> expr<span class="op">.</span>arguments<span class="op">.</span>len() <span class="op">==</span> <span class="dv">0</span> <span class="op">=&gt;</span> <span class="op">{</span></span>
<span id="cb1-423"><a href="#cb1-423" aria-hidden="true" tabindex="-1"></a>        <span class="kw">let</span> rec_id <span class="op">=</span> <span class="kw">self</span><span class="op">.</span>ctx<span class="op">.</span>module<span class="op">.</span>imports[<span class="op">&amp;</span>expr<span class="op">.</span>span]<span class="op">;</span></span>
<span id="cb1-424"><a href="#cb1-424" aria-hidden="true" tabindex="-1"></a>        <span class="kw">let</span> rec <span class="op">=</span> <span class="op">&amp;</span><span class="kw">self</span><span class="op">.</span>ctx<span class="op">.</span>module<span class="op">.</span>import_records[rec_id]<span class="op">;</span></span>
<span id="cb1-425"><a href="#cb1-425" aria-hidden="true" tabindex="-1"></a>        <span class="kw">let</span> importee_id <span class="op">=</span> rec<span class="op">.</span>resolved_module<span class="op">;</span></span>
<span id="cb1-426"><a href="#cb1-426" aria-hidden="true" tabindex="-1"></a>        <span class="cf">match</span> importee_id <span class="op">{</span></span>
<span id="cb1-427"><a href="#cb1-427" aria-hidden="true" tabindex="-1"></a>          <span class="pp">ModuleId::</span>Normal(importee_id) <span class="op">=&gt;</span> <span class="op">{</span></span>
<span id="cb1-428"><a href="#cb1-428" aria-hidden="true" tabindex="-1"></a>            <span class="kw">let</span> chunk_id <span class="op">=</span> <span class="kw">self</span><span class="op">.</span>ctx<span class="op">.</span>chunk_graph<span class="op">.</span>module_to_chunk[importee_id]</span>
<span id="cb1-429"><a href="#cb1-429" aria-hidden="true" tabindex="-1"></a>              <span class="op">.</span>expect(<span class="st">&quot;Normal module should belong to a chunk&quot;</span>)<span class="op">;</span></span>
<span id="cb1-430"><a href="#cb1-430" aria-hidden="true" tabindex="-1"></a>            <span class="kw">let</span> chunk <span class="op">=</span> <span class="op">&amp;</span><span class="kw">self</span><span class="op">.</span>ctx<span class="op">.</span>chunk_graph<span class="op">.</span>chunks[chunk_id]<span class="op">;</span></span>
<span id="cb1-431"><a href="#cb1-431" aria-hidden="true" tabindex="-1"></a>            <span class="dt">str</span><span class="op">.</span>value <span class="op">=</span> <span class="kw">self</span><span class="op">.</span>snippet<span class="op">.</span>atom(<span class="op">&amp;</span><span class="pp">format!</span>(<span class="st">&quot;./{}&quot;</span><span class="op">,</span> chunk<span class="op">.</span>file_name<span class="op">.</span>as_ref()<span class="op">.</span>unwrap()))<span class="op">;</span></span>
<span id="cb1-432"><a href="#cb1-432" aria-hidden="true" tabindex="-1"></a>          <span class="op">}</span></span>
<span id="cb1-433"><a href="#cb1-433" aria-hidden="true" tabindex="-1"></a>          <span class="pp">ModuleId::</span>External(_) <span class="op">=&gt;</span> <span class="op">{</span></span>
<span id="cb1-434"><a href="#cb1-434" aria-hidden="true" tabindex="-1"></a>            <span class="co">// external module doesn&#39;t belong to any chunk, just keep this as it is</span></span>
<span id="cb1-435"><a href="#cb1-435" aria-hidden="true" tabindex="-1"></a>          <span class="op">}</span></span>
<span id="cb1-436"><a href="#cb1-436" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb1-437"><a href="#cb1-437" aria-hidden="true" tabindex="-1"></a>      <span class="op">}</span></span>
<span id="cb1-438"><a href="#cb1-438" aria-hidden="true" tabindex="-1"></a>      _ <span class="op">=&gt;</span> <span class="op">{}</span></span>
<span id="cb1-439"><a href="#cb1-439" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb1-440"><a href="#cb1-440" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-441"><a href="#cb1-441" aria-hidden="true" tabindex="-1"></a>    <span class="co">// visit children</span></span>
<span id="cb1-442"><a href="#cb1-442" aria-hidden="true" tabindex="-1"></a>    <span class="kw">self</span><span class="op">.</span>visit_expression(<span class="op">&amp;</span><span class="kw">mut</span> expr<span class="op">.</span>source)<span class="op">;</span></span>
<span id="cb1-443"><a href="#cb1-443" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> arg <span class="kw">in</span> expr<span class="op">.</span>arguments<span class="op">.</span>iter_mut() <span class="op">{</span></span>
<span id="cb1-444"><a href="#cb1-444" aria-hidden="true" tabindex="-1"></a>      <span class="kw">self</span><span class="op">.</span>visit_expression(arg)<span class="op">;</span></span>
<span id="cb1-445"><a href="#cb1-445" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb1-446"><a href="#cb1-446" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb1-447"><a href="#cb1-447" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-448"><a href="#cb1-448" aria-hidden="true" tabindex="-1"></a>  <span class="kw">fn</span> visit_assignment_target_property(</span>
<span id="cb1-449"><a href="#cb1-449" aria-hidden="true" tabindex="-1"></a>    <span class="op">&amp;</span><span class="kw">mut</span> <span class="kw">self</span><span class="op">,</span></span>
<span id="cb1-450"><a href="#cb1-450" aria-hidden="true" tabindex="-1"></a>    property<span class="op">:</span> <span class="op">&amp;</span><span class="kw">mut</span> <span class="pp">ast::</span>AssignmentTargetProperty<span class="op">&lt;</span><span class="ot">&#39;ast</span><span class="op">&gt;,</span></span>
<span id="cb1-451"><a href="#cb1-451" aria-hidden="true" tabindex="-1"></a>  ) <span class="op">{</span></span>
<span id="cb1-452"><a href="#cb1-452" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="kw">let</span> <span class="pp">ast::AssignmentTargetProperty::</span>AssignmentTargetPropertyIdentifier(prop) <span class="op">=</span> property <span class="op">{</span></span>
<span id="cb1-453"><a href="#cb1-453" aria-hidden="true" tabindex="-1"></a>      <span class="cf">if</span> <span class="kw">let</span> <span class="cn">Some</span>(target) <span class="op">=</span></span>
<span id="cb1-454"><a href="#cb1-454" aria-hidden="true" tabindex="-1"></a>        <span class="kw">self</span><span class="op">.</span>generate_finalized_simple_assignment_target_for_reference(<span class="op">&amp;</span>prop<span class="op">.</span>binding)</span>
<span id="cb1-455"><a href="#cb1-455" aria-hidden="true" tabindex="-1"></a>      <span class="op">{</span></span>
<span id="cb1-456"><a href="#cb1-456" aria-hidden="true" tabindex="-1"></a>        <span class="op">*</span>property <span class="op">=</span> <span class="pp">ast::AssignmentTargetProperty::</span>AssignmentTargetPropertyProperty(</span>
<span id="cb1-457"><a href="#cb1-457" aria-hidden="true" tabindex="-1"></a>          <span class="pp">ast::</span>AssignmentTargetPropertyProperty <span class="op">{</span></span>
<span id="cb1-458"><a href="#cb1-458" aria-hidden="true" tabindex="-1"></a>            name<span class="op">:</span> <span class="pp">ast::PropertyKey::</span>Identifier(</span>
<span id="cb1-459"><a href="#cb1-459" aria-hidden="true" tabindex="-1"></a>              <span class="kw">self</span><span class="op">.</span>snippet<span class="op">.</span>id_name(<span class="op">&amp;</span>prop<span class="op">.</span>binding<span class="op">.</span>name<span class="op">,</span> prop<span class="op">.</span>span)<span class="op">.</span>into_in(<span class="kw">self</span><span class="op">.</span>alloc)<span class="op">,</span></span>
<span id="cb1-460"><a href="#cb1-460" aria-hidden="true" tabindex="-1"></a>            )<span class="op">,</span></span>
<span id="cb1-461"><a href="#cb1-461" aria-hidden="true" tabindex="-1"></a>            binding<span class="op">:</span> <span class="cf">if</span> <span class="kw">let</span> <span class="cn">Some</span>(init) <span class="op">=</span> prop<span class="op">.</span>init<span class="op">.</span>take() <span class="op">{</span></span>
<span id="cb1-462"><a href="#cb1-462" aria-hidden="true" tabindex="-1"></a>              <span class="pp">ast::AssignmentTargetMaybeDefault::</span>AssignmentTargetWithDefault(</span>
<span id="cb1-463"><a href="#cb1-463" aria-hidden="true" tabindex="-1"></a>                <span class="pp">ast::</span>AssignmentTargetWithDefault <span class="op">{</span></span>
<span id="cb1-464"><a href="#cb1-464" aria-hidden="true" tabindex="-1"></a>                  binding<span class="op">:</span> <span class="pp">ast::AssignmentTarget::</span>SimpleAssignmentTarget(target)<span class="op">,</span></span>
<span id="cb1-465"><a href="#cb1-465" aria-hidden="true" tabindex="-1"></a>                  init<span class="op">,</span></span>
<span id="cb1-466"><a href="#cb1-466" aria-hidden="true" tabindex="-1"></a>                  span<span class="op">:</span> <span class="pp">Span::</span><span class="kw">default</span>()<span class="op">,</span></span>
<span id="cb1-467"><a href="#cb1-467" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span></span>
<span id="cb1-468"><a href="#cb1-468" aria-hidden="true" tabindex="-1"></a>                <span class="op">.</span>into_in(<span class="kw">self</span><span class="op">.</span>alloc)<span class="op">,</span></span>
<span id="cb1-469"><a href="#cb1-469" aria-hidden="true" tabindex="-1"></a>              )</span>
<span id="cb1-470"><a href="#cb1-470" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span> <span class="cf">else</span> <span class="op">{</span></span>
<span id="cb1-471"><a href="#cb1-471" aria-hidden="true" tabindex="-1"></a>              <span class="pp">ast::AssignmentTargetMaybeDefault::</span>AssignmentTarget(</span>
<span id="cb1-472"><a href="#cb1-472" aria-hidden="true" tabindex="-1"></a>                <span class="pp">ast::AssignmentTarget::</span>SimpleAssignmentTarget(target)<span class="op">,</span></span>
<span id="cb1-473"><a href="#cb1-473" aria-hidden="true" tabindex="-1"></a>              )</span>
<span id="cb1-474"><a href="#cb1-474" aria-hidden="true" tabindex="-1"></a>            <span class="op">},</span></span>
<span id="cb1-475"><a href="#cb1-475" aria-hidden="true" tabindex="-1"></a>            span<span class="op">:</span> <span class="pp">Span::</span><span class="kw">default</span>()<span class="op">,</span></span>
<span id="cb1-476"><a href="#cb1-476" aria-hidden="true" tabindex="-1"></a>          <span class="op">}</span></span>
<span id="cb1-477"><a href="#cb1-477" aria-hidden="true" tabindex="-1"></a>          <span class="op">.</span>into_in(<span class="kw">self</span><span class="op">.</span>alloc)<span class="op">,</span></span>
<span id="cb1-478"><a href="#cb1-478" aria-hidden="true" tabindex="-1"></a>        )<span class="op">;</span></span>
<span id="cb1-479"><a href="#cb1-479" aria-hidden="true" tabindex="-1"></a>      <span class="op">}</span> <span class="cf">else</span> <span class="op">{</span></span>
<span id="cb1-480"><a href="#cb1-480" aria-hidden="true" tabindex="-1"></a>        prop<span class="op">.</span>binding<span class="op">.</span>reference_id<span class="op">.</span>get_mut()<span class="op">.</span>take()<span class="op">;</span></span>
<span id="cb1-481"><a href="#cb1-481" aria-hidden="true" tabindex="-1"></a>      <span class="op">}</span></span>
<span id="cb1-482"><a href="#cb1-482" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb1-483"><a href="#cb1-483" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-484"><a href="#cb1-484" aria-hidden="true" tabindex="-1"></a>    <span class="co">// visit children</span></span>
<span id="cb1-485"><a href="#cb1-485" aria-hidden="true" tabindex="-1"></a>    <span class="cf">match</span> property <span class="op">{</span></span>
<span id="cb1-486"><a href="#cb1-486" aria-hidden="true" tabindex="-1"></a>      <span class="pp">ast::AssignmentTargetProperty::</span>AssignmentTargetPropertyIdentifier(ident) <span class="op">=&gt;</span> <span class="op">{</span></span>
<span id="cb1-487"><a href="#cb1-487" aria-hidden="true" tabindex="-1"></a>        <span class="kw">self</span><span class="op">.</span>visit_assignment_target_property_identifier(ident)<span class="op">;</span></span>
<span id="cb1-488"><a href="#cb1-488" aria-hidden="true" tabindex="-1"></a>      <span class="op">}</span></span>
<span id="cb1-489"><a href="#cb1-489" aria-hidden="true" tabindex="-1"></a>      <span class="pp">ast::AssignmentTargetProperty::</span>AssignmentTargetPropertyProperty(prop) <span class="op">=&gt;</span> <span class="op">{</span></span>
<span id="cb1-490"><a href="#cb1-490" aria-hidden="true" tabindex="-1"></a>        <span class="kw">self</span><span class="op">.</span>visit_assignment_target_property_property(prop)<span class="op">;</span></span>
<span id="cb1-491"><a href="#cb1-491" aria-hidden="true" tabindex="-1"></a>      <span class="op">}</span></span>
<span id="cb1-492"><a href="#cb1-492" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb1-493"><a href="#cb1-493" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb1-494"><a href="#cb1-494" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-495"><a href="#cb1-495" aria-hidden="true" tabindex="-1"></a>  <span class="kw">fn</span> visit_simple_assignment_target(<span class="op">&amp;</span><span class="kw">mut</span> <span class="kw">self</span><span class="op">,</span> target<span class="op">:</span> <span class="op">&amp;</span><span class="kw">mut</span> SimpleAssignmentTarget<span class="op">&lt;</span><span class="ot">&#39;ast</span><span class="op">&gt;</span>) <span class="op">{</span></span>
<span id="cb1-496"><a href="#cb1-496" aria-hidden="true" tabindex="-1"></a>    <span class="kw">self</span><span class="op">.</span>rewrite_simple_assignment_target(target)<span class="op">;</span></span>
<span id="cb1-497"><a href="#cb1-497" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-498"><a href="#cb1-498" aria-hidden="true" tabindex="-1"></a>    <span class="co">// visit children</span></span>
<span id="cb1-499"><a href="#cb1-499" aria-hidden="true" tabindex="-1"></a>    <span class="cf">match</span> target <span class="op">{</span></span>
<span id="cb1-500"><a href="#cb1-500" aria-hidden="true" tabindex="-1"></a>      <span class="pp">SimpleAssignmentTarget::</span>AssignmentTargetIdentifier(ident) <span class="op">=&gt;</span> <span class="op">{</span></span>
<span id="cb1-501"><a href="#cb1-501" aria-hidden="true" tabindex="-1"></a>        <span class="kw">self</span><span class="op">.</span>visit_identifier_reference(ident)<span class="op">;</span></span>
<span id="cb1-502"><a href="#cb1-502" aria-hidden="true" tabindex="-1"></a>      <span class="op">}</span></span>
<span id="cb1-503"><a href="#cb1-503" aria-hidden="true" tabindex="-1"></a>      <span class="pp">SimpleAssignmentTarget::</span>MemberAssignmentTarget(expr) <span class="op">=&gt;</span> <span class="op">{</span></span>
<span id="cb1-504"><a href="#cb1-504" aria-hidden="true" tabindex="-1"></a>        <span class="kw">self</span><span class="op">.</span>visit_member_expression(expr)<span class="op">;</span></span>
<span id="cb1-505"><a href="#cb1-505" aria-hidden="true" tabindex="-1"></a>      <span class="op">}</span></span>
<span id="cb1-506"><a href="#cb1-506" aria-hidden="true" tabindex="-1"></a>      <span class="pp">SimpleAssignmentTarget::</span>TSAsExpression(expr) <span class="op">=&gt;</span> <span class="op">{</span></span>
<span id="cb1-507"><a href="#cb1-507" aria-hidden="true" tabindex="-1"></a>        <span class="kw">self</span><span class="op">.</span>visit_expression(<span class="op">&amp;</span><span class="kw">mut</span> expr<span class="op">.</span>expression)<span class="op">;</span></span>
<span id="cb1-508"><a href="#cb1-508" aria-hidden="true" tabindex="-1"></a>      <span class="op">}</span></span>
<span id="cb1-509"><a href="#cb1-509" aria-hidden="true" tabindex="-1"></a>      <span class="pp">SimpleAssignmentTarget::</span>TSSatisfiesExpression(expr) <span class="op">=&gt;</span> <span class="op">{</span></span>
<span id="cb1-510"><a href="#cb1-510" aria-hidden="true" tabindex="-1"></a>        <span class="kw">self</span><span class="op">.</span>visit_expression(<span class="op">&amp;</span><span class="kw">mut</span> expr<span class="op">.</span>expression)<span class="op">;</span></span>
<span id="cb1-511"><a href="#cb1-511" aria-hidden="true" tabindex="-1"></a>      <span class="op">}</span></span>
<span id="cb1-512"><a href="#cb1-512" aria-hidden="true" tabindex="-1"></a>      <span class="pp">SimpleAssignmentTarget::</span>TSNonNullExpression(expr) <span class="op">=&gt;</span> <span class="op">{</span></span>
<span id="cb1-513"><a href="#cb1-513" aria-hidden="true" tabindex="-1"></a>        <span class="kw">self</span><span class="op">.</span>visit_expression(<span class="op">&amp;</span><span class="kw">mut</span> expr<span class="op">.</span>expression)<span class="op">;</span></span>
<span id="cb1-514"><a href="#cb1-514" aria-hidden="true" tabindex="-1"></a>      <span class="op">}</span></span>
<span id="cb1-515"><a href="#cb1-515" aria-hidden="true" tabindex="-1"></a>      <span class="pp">SimpleAssignmentTarget::</span>TSTypeAssertion(expr) <span class="op">=&gt;</span> <span class="op">{</span></span>
<span id="cb1-516"><a href="#cb1-516" aria-hidden="true" tabindex="-1"></a>        <span class="kw">self</span><span class="op">.</span>visit_expression(<span class="op">&amp;</span><span class="kw">mut</span> expr<span class="op">.</span>expression)<span class="op">;</span></span>
<span id="cb1-517"><a href="#cb1-517" aria-hidden="true" tabindex="-1"></a>      <span class="op">}</span></span>
<span id="cb1-518"><a href="#cb1-518" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb1-519"><a href="#cb1-519" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb1-520"><a href="#cb1-520" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
</body>
</html>
