<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="" xml:lang="">
<head>
  <meta charset="utf-8" />
  <meta name="generator" content="pandoc" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
  <title>testing</title>
  <style>
    html {
      color: #1a1a1a;
      background-color: #fdfdfd;
    }
    body {
      margin: 0 auto;
      max-width: 36em;
      padding-left: 50px;
      padding-right: 50px;
      padding-top: 50px;
      padding-bottom: 50px;
      hyphens: auto;
      overflow-wrap: break-word;
      text-rendering: optimizeLegibility;
      font-kerning: normal;
    }
    @media (max-width: 600px) {
      body {
        font-size: 0.9em;
        padding: 12px;
      }
      h1 {
        font-size: 1.8em;
      }
    }
    @media print {
      html {
        background-color: white;
      }
      body {
        background-color: transparent;
        color: black;
        font-size: 12pt;
      }
      p, h2, h3 {
        orphans: 3;
        widows: 3;
      }
      h2, h3, h4 {
        page-break-after: avoid;
      }
    }
    p {
      margin: 1em 0;
    }
    a {
      color: #1a1a1a;
    }
    a:visited {
      color: #1a1a1a;
    }
    img {
      max-width: 100%;
    }
    svg {
      height: auto;
      max-width: 100%;
    }
    h1, h2, h3, h4, h5, h6 {
      margin-top: 1.4em;
    }
    h5, h6 {
      font-size: 1em;
      font-style: italic;
    }
    h6 {
      font-weight: normal;
    }
    ol, ul {
      padding-left: 1.7em;
      margin-top: 1em;
    }
    li > ol, li > ul {
      margin-top: 0;
    }
    blockquote {
      margin: 1em 0 1em 1.7em;
      padding-left: 1em;
      border-left: 2px solid #e6e6e6;
      color: #606060;
    }
    code {
      font-family: Menlo, Monaco, Consolas, 'Lucida Console', monospace;
      font-size: 85%;
      margin: 0;
      hyphens: manual;
    }
    pre {
      margin: 1em 0;
      overflow: auto;
    }
    pre code {
      padding: 0;
      overflow: visible;
      overflow-wrap: normal;
    }
    .sourceCode {
     background-color: transparent;
     overflow: visible;
    }
    hr {
      background-color: #1a1a1a;
      border: none;
      height: 1px;
      margin: 1em 0;
    }
    table {
      margin: 1em 0;
      border-collapse: collapse;
      width: 100%;
      overflow-x: auto;
      display: block;
      font-variant-numeric: lining-nums tabular-nums;
    }
    table caption {
      margin-bottom: 0.75em;
    }
    tbody {
      margin-top: 0.5em;
      border-top: 1px solid #1a1a1a;
      border-bottom: 1px solid #1a1a1a;
    }
    th {
      border-top: 1px solid #1a1a1a;
      padding: 0.25em 0.5em 0.25em 0.5em;
    }
    td {
      padding: 0.125em 0.5em 0.25em 0.5em;
    }
    header {
      margin-bottom: 4em;
      text-align: center;
    }
    #TOC li {
      list-style: none;
    }
    #TOC ul {
      padding-left: 1.3em;
    }
    #TOC > ul {
      padding-left: 0;
    }
    #TOC a:not(:hover) {
      text-decoration: none;
    }
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    div.columns{display: flex; gap: min(4vw, 1.5em);}
    div.column{flex: auto; overflow-x: auto;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    /* The extra [class] is a hack that increases specificity enough to
       override a similar rule in reveal.js */
    ul.task-list[class]{list-style: none;}
    ul.task-list li input[type="checkbox"] {
      font-size: inherit;
      width: 0.8em;
      margin: 0 0.8em 0.2em -1.6em;
      vertical-align: middle;
    }
    .display.math{display: block; text-align: center; margin: 0.5rem auto;}
  </style>
</head>
<body>
<h1 id="testing">Testing</h1>
<p>We have two groups of test suites: one for Rust, and one for
Node.js.</p>
<h2 id="summary">Summary</h2>
<ul>
<li><code>just test-rust</code> for running all Rust tests.</li>
<li><code>just test-node</code> for running all Node.js tests.</li>
</ul>
<h2 id="rust-tests">Rust Tests</h2>
<p>Rust tests cases are stored in</p>
<ul>
<li><code>/crates/rolldown/tests/esbuild</code></li>
<li><code>/crates/rolldown/tests/fixtures</code></li>
</ul>
<h3 id="how-test-cases-are-defined">How test cases are defined</h3>
<p>A test case is a folder that contains
<code>test.config.json</code>.</p>
<p><code>test.config.json</code> contains the configuration for the test
suite. See <a
href="https://github.com/rolldown/rolldown/blob/main/crates/rolldown_testing/src/test_config/mod.rs">here</a>
for more information.</p>
<ul>
<li><code>main.js</code> is the default entry of the test case, if
<code>input.input</code> is not specified in
<code>test.config.json</code>.</li>
</ul>
<p>Rolldown will bundle the input into <code>/dist</code>, and using the
same <code>node</code> instance to execute every entry file in
<code>/dist</code> orderly. If <code>_test.mjs</code> is found in test
case folder, it will be executed after all entry points are
executed.</p>
<h2 id="node.js-tests">Node.js Tests</h2>
<div class="tip">
<p>Make sure to <a href="./build.md">build Node.js bindings</a> before
running these tests.</p>
</div>
<h3 id="node.js-api-tests">Node.js API tests</h3>
<p>Tests located in <code>packages/rolldown/tests</code> are used to
test Rolldown’s Node.js API (i.e. the API of the <code>rolldown</code>
package published on NPM).</p>
<p>It is our goal to align Rolldown’s Node.js API with that of Rollup’s
as much as possible, and the tests are used to verify API alignment and
track the progress. Currently, there are many Rollup options that are
not yet supported. If you implemented support for additional options
from rollup, please add corresponding test cases for them.</p>
<p>In <code>/packages/rolldown</code>:</p>
<ul>
<li><code>pnpm test</code> will run rolldown tests.</li>
<li><code>pnpm test:update</code> will run and update the tests’
status.</li>
</ul>
<h4 id="run-tests-of-the-specific-file">Run tests of the specific
file</h4>
<p>To run tests of the specific file, you could use</p>
<pre class="shell"><code>pnpm test -- test-file-name</code></pre>
<p>For example, to run tests in <code>fixture.test.ts</code>, you could
use <code>pnpm test -- fixture</code>.</p>
<h4 id="run-the-specific-test">Run the specific test</h4>
<p>To run specific test, you could use</p>
<pre class="shell"><code>pnpm test -- -t test-name</code></pre>
<p>Names of tests in <code>fixture.test.ts</code> are defined with their
folder names. <code>tests/fixtures/resolve/alias</code> will has test
name <code>resolve/alias</code>.</p>
<p>To run the <code>tests/fixtures/resolve/alias</code> test, you could
use <code>pnpm test -- -t "resolve/alias"</code>.</p>
<div class="info">
<ul>
<li><p><code>pnpm test -t aaa bbb</code> is different from
<code>pnpm test -t "aaa bbb"</code>. The former will run tests that
either contains <code>aaa</code> or <code>bbb</code>, while the latter
will run tests, whose name contain <code>aaa bbb</code>.</p></li>
<li><p>For more advanced usage, please refer to
https://vitest.dev/guide/filtering.</p></li>
</ul>
</div>
<h3 id="rollup-behavior-alignment-tests">Rollup behavior alignment
tests</h3>
<p>We also aim for behavior alignment with Rollup by running Rollup’s
own tests against Rolldown.</p>
<p>To achieve this, each test case in
<code>packages/rollup-tests/test</code> proxies to the corresponding
test in the <code>rollup</code> git submodule in project root.</p>
<p>The git submodule should have been initialized after running
<code>just init</code> when setting up the project, but you should also
run <code>just update</code> to update the submodule before running the
Rollup tests.</p>
<p>In <code>/packages/rollup-tests</code>:</p>
<ul>
<li><code>pnpm test</code> will run rollup tests.</li>
<li><code>pnpm test:update</code> will run and update the tests’
status.</li>
</ul>
</body>
</html>
